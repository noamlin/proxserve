{"mappings":"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","sources":["src/globals.ts","src/general-functions.ts","src/supporting-functions.ts","src/pseudo-methods.ts","src/event-emitter.ts","src/proxy-methods.ts","src/index.ts"],"sourcesContent":["/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nexport const ND = Symbol.for('proxserve_node_data'); // key for the data of a node\nexport const NID = Symbol.for('proxserve_node_inherited_data'); // key for the inherited data of a node\n\n// acceptable types to be proxied\nexport const proxyTypes = {\n\t\"Object\": true,\n\t\"Array\": true,\n};\n\n// statuses of data-nodes\nexport enum nodeStatuses {\n\tACTIVE = 'active',\n\tSTOPPED = 'stopped',\n\tBLOCKED = 'blocked',\n\tSPLICING = 'splicing',\n};\n\n// statuses of proxies\nexport enum proxyStatuses {\n\tALIVE = 'alive',\n\tDELETED = 'deleted',\n\tREVOKED = 'revoked',\n};\n\n// event names that can be emitted\nexport enum eventNames {\n\tcreate = 'create',\n\tupdate = 'update',\n\tdelete = 'delete',\n\tsplice = 'splice',\n\tshift = 'shift',\n\tunshift = 'unshift',\n};\n\nexport type SomeObject = {\n\t[key: string | number | symbol]: any,\n};\nexport type SomeProxy = {\n\t[ND]: ProxyNode[typeof ND],\n\t[NID]: ProxyNode[typeof NID],\n\t[property: string]: any,\n};\nexport type SomeArray = Array<any>;\nexport type TargetVariable = SomeObject | SomeArray;\n\n// theoretically can have any string possible as a type. but these are the most common and they help our TS autocomplete\nexport type variableTypes = 'Object'|'Array'|'Number'|'String'|'Boolean'|'Null'|'Undefined'|'BigInt'|'Symbol'|'Date';\n\nexport type ListenerData = {\n\ttype: eventNames[],\n\tonce: boolean,\n\tfunc: Function,\n\tid?: string | number;\n};\n\nexport type DeferredEvent = {\n\tdataNode: DataNode,\n\tchange: ChangeEvent,\n\tshouldCapture: boolean,\n};\n\nexport type ChangeEvent = {\n\tpath: string,\n\tvalue: any,\n\toldValue: any,\n\ttype: eventNames,\n\targs?: {\n\t\tstart?: number;\n\t\tdeleteCount?: number;\n\t\titems?: any[];\n\t},\n};\n\nexport interface DataNode {\n\t// Node Inherited Data\n\t[NID]: {\n\t\tstatus?: nodeStatuses;\n\t};\n\t// Node Data\n\t[ND]: {\n\t\tproxyNode: ProxyNode;\n\t\tparentNode: DataNode;\n\t\tlisteners: {\n\t\t\tshallow: ListenerData[];\n\t\t\tdeep: ListenerData[];\n\t\t},\n\t\tpath: string;\n\t\tpropertyPath: string;\n\t\tdeferredEvents?: DeferredEvent[];\n\t\tisTreePrototype?: boolean;\n\t};\n};\n\nexport interface ProxyNode {\n\t[NID]: {\n\t\tstatus?: proxyStatuses;\n\t};\n\t[ND]: {\n\t\ttarget: TargetVariable;\n\t\tdataNode: DataNode;\n\t\tproxy?: SomeProxy;\n\t\trevoke?: () => void;\n\t\tisTreePrototype?: boolean;\n\t};\n\t[property: string]: ProxyNode;\n};\n\nexport interface ProxserveInterface {\n\tstrict: boolean;\n\temitMethods: boolean;\n\tdestroyDelay: number;\n\tdataTree: DataNode;\n\tproxyTree: ProxyNode;\n\tcreateProxy(parentDataNode: DataNode, targetProperty?: string): SomeProxy;\n}","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { SomeObject, SomeArray, variableTypes } from './globals';\n\n/**\n * return a string representing the full type of the variable\n */\nexport function realtypeof(variable: any): variableTypes {\n\tlet rawType = Object.prototype.toString.call(variable); //[object Object], [object Array], [object Number]...\n\treturn rawType.substring(8, rawType.length - 1);\n}\n\n/**\n * check if variable is a number or a string of a number\n * @param variable \n */\n/*export function isNumeric(variable: any): boolean {\n\tif(typeof variable === 'string' && variable === '') {\n\t\treturn false;\n\t}\n\t\n\treturn !isNaN(variable as number);\n}*/\n\n/**\n * recursively clones objects and array\n */\nconst simpleCloneSet = new WeakSet();\nexport function simpleClone(variable: any): any {\n\tlet typeofvar = realtypeof(variable);\n\n\tif(typeofvar === 'Object') {\n\t\tconst obj = variable as SomeObject;\n\t\tsimpleCloneSet.add(obj);\n\t\tconst cloned = {};\n\t\tlet keys = Object.keys(obj);\n\t\tfor(let key of keys) {\n\t\t\tif(simpleCloneSet.has(obj[key])) {\n\t\t\t\tcloned[key] = obj[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[key] = simpleClone(obj[key]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse if(typeofvar === 'Array') {\n\t\tconst arr = variable as SomeArray;\n\t\tsimpleCloneSet.add(arr);\n\t\tconst cloned = [];\n\t\tfor(let i = 0; i < arr.length; i++) {\n\t\t\tif(simpleCloneSet.has(arr[i])) {\n\t\t\t\tcloned[i] = arr[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[i] = simpleClone(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse { // hopefully a primitive\n\t\tif(typeofvar !== 'Undefined' && typeofvar !== 'Null' && typeofvar !== 'Boolean' && typeofvar !== 'Number'\n\t\t&& typeofvar !== 'BigInt' && typeofvar !== 'String') {\n\t\t\tconsole.warn(`Can't clone a variable of type ${typeofvar}`);\n\t\t}\n\t\treturn variable;\n\t}\n}\n\n/**\n * splits a path to an array of properties\n * (benchmarked and is faster than regex and split())\n * @param path \n */\nexport function splitPath(path: string): Array<string|number> {\n\tif(typeof path !== 'string' || path === '') {\n\t\treturn [];\n\t}\n\t\n\tlet i = 0, betweenBrackets = false, onlyDigits = false;\n\t//loop will skip over openning '.' or '['\n\tif(path[0] === '.') {\n\t\ti = 1;\n\t} else if(path[0] === '[') {\n\t\ti = 1;\n\t\tbetweenBrackets = true;\n\t\tonlyDigits = true;\n\t}\n\n\tlet resultsArr = [] as Array<string|number>;\n\tlet tmp = '';\n\tfor(; i < path.length; i++) {\n\t\tlet char = path[i];\n\n\t\tif(betweenBrackets) {\n\t\t\tif(char === ']') {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tresultsArr.push(parseInt(tmp, 10));\n\t\t\t\t} else {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t}\n\n\t\t\t\tbetweenBrackets = false;\n\t\t\t\tonlyDigits = false;\n\t\t\t\ttmp = '';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tlet code = char.charCodeAt(0);\n\t\t\t\t\tif(code < 48 || code > 57) { //less than '0' char or greater than '9' char\n\t\t\t\t\t\tonlyDigits = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(char === '[') {\n\t\t\t\tbetweenBrackets = true;\n\t\t\t\tonlyDigits = true;\n\t\t\t}\n\t\t\t\n\t\t\t//check if starting a new property but avoid special case of [prop][prop]\n\t\t\tif(char === '.' || char === '[') {\n\t\t\t\tif(tmp !== '') {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t\ttmp = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t}\n\tif(tmp !== '') {\n\t\tresultsArr.push(tmp);\n\t}\n\treturn resultsArr;\n}\n\n/**\n * evaluate a long path and return the designated object and its referred property\n */\nexport function evalPath(obj: SomeObject, path: string): {\n\tobject: SomeObject,\n\tproperty: string|number,\n\tvalue: any,\n} {\n\tif(path === '') {\n\t\treturn {\n\t\t\tobject: obj,\n\t\t\tproperty: undefined,\n\t\t\tvalue: obj,\n\t\t};\n\t}\n\n\tlet segments = splitPath(path);\n\tlet i: number;\n\tfor(i = 0; i <= segments.length - 2; i++) { //iterate until one before last property because they all must exist\n\t\tobj = obj[segments[i]];\n\t\tif(typeof obj === 'undefined') {\n\t\t\tthrow new Error(`Invalid path was given - \"${path}\"`);\n\t\t}\n\t}\n\treturn {\n\t\tobject: obj,\n\t\tproperty: segments[i],\n\t\tvalue: obj[ segments[i] ],\n\t};\n}","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, ND, NID, DataNode, ProxyNode, TargetVariable } from './globals';\nimport { realtypeof } from './general-functions';\n\n/**\n * Convert property name to valid path segment\n */\nexport function property2path(obj: any, property: string|number): string {\n\tif(typeof property === 'symbol') {\n\t\tthrow new Error(`property of type \"symbol\" isn't path'able`);\n\t}\n\n\tconst typeofobj = realtypeof(obj);\n\tswitch(typeofobj) {\n\t\tcase 'Object': {\n\t\t\treturn `.${property}`;\n\t\t}\n\t\tcase 'Array': {\n\t\t\treturn `[${property}]`;\n\t\t}\n\t\tdefault: {\n\t\t\tconsole.warn(`Not Implemented (type of '${typeofobj}')`);\n\t\t\treturn property as string;\n\t\t}\n\t}\n}\n\n/**\n * recursively switch between all proxies to their original targets.\n * note: original targets should never hold proxies under them,\n * thus altering the object references (getting from 'value') should be ok.\n * if whoever uses this library decides to\n * \t1. create a proxy with children (sub-proxies)\n * \t2. create a regular object\n * \t3. adding sub-proxies to the regular object\n * \t4. attaching the regular object to the proxy\n * then this regular object will be altered.\n */\nexport function unproxify(value: any): any {\n\tconst typeofvalue = realtypeof(value);\n\n\tif(proxyTypes[typeofvalue]) {\n\t\tlet target = value;\n\t\ttry {\n\t\t\ttarget = value.$getOriginalTarget();\n\t\t} catch(error) {}\n\n\t\tswitch(typeofvalue) {\n\t\t\tcase 'Object':\n\t\t\t\tlet keys = Object.keys(target);\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\ttarget[key] = unproxify(target[key]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Array':\n\t\t\t\tfor(let i=0; i < target.length; i++) {\n\t\t\t\t\ttarget[i] = unproxify(target[i]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Not Implemented (type of '${typeofvalue}')`);\n\t\t}\n\n\t\treturn target;\n\t}\n\telse {\n\t\treturn value; // primitive\n\t}\n}\n\n/**\n * create or reset a node in a tree of meta-data (mainly path related)\n * and optionally create a node in a tree of proxy data (mainly objects related)\n */\nexport function createNodes(\n\tparentDataNode: DataNode,\n\tparentProxyNode: ProxyNode | undefined,\n\tproperty: string | number,\n\ttarget: TargetVariable | undefined,\n): { dataNode: DataNode, proxyNode: ProxyNode } {\n\t//handle property path\n\tlet propertyPath: string;\n\tif(parentProxyNode?.[ND].target) {\n\t\tpropertyPath = property2path(parentProxyNode[ND].target, property);\n\t} else {\n\t\tpropertyPath = property2path({}, property); // if parent doesn't have target then treat it as object\n\t}\n\t\n\t//handle data node\n\tlet dataNode: DataNode = parentDataNode[property]; // try to receive existing data-node\n\tif(!dataNode) {\n\t\tdataNode = {\n\t\t\t[NID]: Object.create(parentDataNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\tparentNode: parentDataNode,\n\t\t\t\tlisteners: {\n\t\t\t\t\tshallow: [],\n\t\t\t\t\tdeep: []\n\t\t\t\t},\n\t\t\t}\n\t\t} as DataNode;\n\t\tparentDataNode[property] = dataNode;\n\t}\n\n\tdelete dataNode[NID].status; // clears old status in case a node previously existed\n\t// updates path (for rare case where parent was array and then changed to object or vice versa)\n\tif(!parentDataNode[ND].isTreePrototype) {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: parentDataNode[ND].path + propertyPath,\n\t\t\tpropertyPath\n\t\t});\n\t}\n\telse {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: '',\n\t\t\tpropertyPath: ''\n\t\t});\n\t}\n\n\t//handle proxy node\n\tlet proxyNode: ProxyNode;\n\tif(parentProxyNode) {\n\t\tproxyNode = {\n\t\t\t[NID]: Object.create(parentProxyNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\ttarget,\n\t\t\t\tdataNode,\n\t\t\t},\n\t\t};\n\n\t\tparentProxyNode[property] = proxyNode;\n\n\t\t//attach nodes to each other\n\t\tdataNode[ND].proxyNode = proxyNode;\n\t}\n\n\treturn { dataNode, proxyNode };\n}\n","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Pseudo methods are methods that aren't really on the object - not as a property nor via its prototype\n// thus they will not be retrieved via \"for..in\" and etcetera. Their property name is actually undefined, but\n// calling it will return the method via the JS proxy's \"get\" handler.\n// (i.e. someProxserve.pseudoFunction will return the pseudoFunction)\n\"use strict\"\n\nimport { eventNames, nodeStatuses, ND, NID, DataNode, ProxyNode, ListenerData, TargetVariable, ProxserveInterface } from './globals';\nimport { createNodes } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\n/**\n * stop object and children from emitting change events\n * automatically filled param {Object} dataNode\n */\nexport function stop(dataNode: DataNode): void {\n\tdataNode[NID].status = nodeStatuses.STOPPED;\n}\n\n/**\n * block object and children from any changes.\n * user can't set nor delete any property\n * automatically filled param {Object} dataNode\n */\nexport function block(dataNode: DataNode): void {\n\tdataNode[NID].status = nodeStatuses.BLOCKED;\n}\n\n/**\n * resume default behavior of emitting change events, inherited from parent\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * @param {Boolean} [force] - force being active regardless of parent\n */\nexport function activate(dataNode: DataNode, proxyNode: ProxyNode, force=false): void {\n\tif(force || dataNode === this.dataTree) { //force activation or we are on root proxy\n\t\tdataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\telse {\n\t\tdelete dataNode[NID].status;\n\t}\n}\n\ninterface OnOptions {\n\tdeep?: boolean;\n\tid?: number | string;\n\tonce?: boolean;\n}\n/**\n * add event listener on a proxy or on a descending path\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * \n * @param events\n * @param [path] - path selector\n * @param listener\n * @param [options]\n * \t@property [options.deep] - should listen for event emitted by sub-objects or not\n * \t@property [options.id] - identifier for removing this listener later\n * \t@property [options.once] - whether this listener will run only once or always\n */\nexport function on(\n\tdataNode: DataNode,\n\tproxyNode: ProxyNode,\n\tevents: eventNames | eventNames[],\n\tpath: string,\n\tlistener: Function,\n\toptions?: OnOptions,\n) {\n\tlet {\n\t\tdeep = false,\n\t\tid = undefined,\n\t\tonce = false\n\t} = options;\n\n\tif((events as string) === 'change') {\n\t\tevents = Object.keys(eventNames) as eventNames[]; // will listen to all events\n\t} else if(!Array.isArray(events)) {\n\t\tevents = [events];\n\t}\n\n\tfor(let event of events) {\n\t\tif(!eventNames[event]) {\n\t\t\tconst names = Object.keys(eventNames);\n\t\t\tthrow new Error(`${event} is not a valid event. valid events are ${names.join(',')}`);\n\t\t}\n\t}\n\n\tif(typeof path === 'function') { // if called without path\n\t\tif(typeof listener === 'object') { // listener is options\n\t\t\tconst optionsFromListener = listener as OnOptions;\n\t\t\tif(typeof optionsFromListener.deep === 'boolean') {\n\t\t\t\tdeep = optionsFromListener.deep;\n\t\t\t}\n\t\t\tif(optionsFromListener.id !== undefined) {\n\t\t\t\tid = optionsFromListener.id;\n\t\t\t}\n\t\t\tif(typeof optionsFromListener.once === 'boolean') {\n\t\t\t\tonce = optionsFromListener.once;\n\t\t\t}\n\t\t}\n\t\tlistener = path as Function;\n\t\tpath = '';\n\t} else if(typeof listener !== 'function') {\n\t\tthrow new Error(`invalid arguments were given. listener must be a function`);\n\t}\n\t\n\tlet segments = splitPath(path);\n\tfor(let property of segments) { // traverse down the tree\n\t\tif(!dataNode[property]) { // create data-nodes if needed\n\t\t\tcreateNodes(dataNode, undefined, property, undefined);\n\t\t}\n\n\t\tdataNode = dataNode[property];\n\t}\n\n\tlet listenersPool = dataNode[ND].listeners.shallow;\n\tif(deep) {\n\t\tlistenersPool = dataNode[ND].listeners.deep;\n\t}\n\n\tlet listenerObj = {\n\t\ttype: events,\n\t\tonce: once,\n\t\tfunc: listener\n\t} as ListenerData;\n\n\tif(id !== undefined) {\n\t\tlistenerObj.id = id;\n\t}\n\tlistenersPool.push(listenerObj);\n}\n\n/**\n * just like `on` but the listener will run only once\n * @see on() function\n */\nexport function once(\n\tdataNode: DataNode,\n\tproxyNode: ProxyNode,\n\tevents: eventNames | eventNames[],\n\tpath: string,\n\tlistener: Function,\n\toptions?: OnOptions): void {\n\tif(typeof options !== 'object') {\n\t\toptions = {};\n\t}\n\toptions.once = true;\n\ton.call(this, dataNode, proxyNode, events, path, listener, options);\n}\n\nfunction removeById(listenersArr: ListenerData[], id: string | number | Function): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listenerObj = listenersArr[i];\n\t\tif((id !== undefined && listenerObj.id === id) || listenerObj.func === id) {\n\t\t\tlistenersArr.splice(i, 1);\n\t\t}\n\t}\n}\n\n/**\n * removes a listener from a path by an identifier (can have multiple listeners with the same ID)\n * or by the listener function itself\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * \n * @param [path] - path selector\n * @param id - the listener(s) identifier or listener-function\n */\nexport function removeListener(dataNode: DataNode, proxyNode: ProxyNode, path: string, id: string | number | Function): void {\n\tif(arguments.length === 3) { // if called without path\n\t\tid = path as string | number | Function;\n\t\tpath = '';\n\t}\n\n\tlet fullPath = `${dataNode[ND].path}${path}`;\n\tlet segments = splitPath(path);\n\t// traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove listener from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tremoveById(dataNode[ND].listeners.shallow, id);\n\tremoveById(dataNode[ND].listeners.deep, id);\n}\n\n/**\n * removing all listeners of a path\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * \n * @param [path] - path selector\n */\nexport function removeAllListeners(dataNode: DataNode, proxyNode: ProxyNode, path = '') {\n\tlet fullPath = `${dataNode[ND].path}${path}`;\n\tlet segments = splitPath(path);\n\t//traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove all listeners from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tdataNode[ND].listeners.shallow = [] as ListenerData[];\n\tdataNode[ND].listeners.deep = [] as ListenerData[];\n}\n\n/**\n * the following functions (getOriginalTarget, getProxserveNodes, getProxserveInstance) seem silly\n * because they could have been written directly on the handler's get() method but it's here as part of the convention of\n * exposing proxy-\"inherited\"-methods\n */\n/**\n * get original target that is behind the proxy\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n */\nexport function getOriginalTarget(dataNode: DataNode, proxyNode: ProxyNode): TargetVariable {\n\treturn proxyNode[ND].target;\n}\n\n/**\n * get the data-node of a proxy (which holds all meta data)\n * and also get proxy-node of a proxy (which holds all related objects)\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n */\nexport function getProxserveNodes(dataNode: DataNode, proxyNode: ProxyNode): {\n\tdataNode: DataNode;\n\tproxyNode: ProxyNode;\n} {\n\treturn { dataNode, proxyNode };\n}\n\n/**\n * get the Proxserve's instance that created this proxy\n */\nexport function getProxserveInstance(): ProxserveInterface {\n\treturn (this as ProxserveInterface);\n}","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { eventNames, nodeStatuses, proxyStatuses, ND, NID, DataNode, ChangeEvent, DeferredEvent, ListenerData } from './globals';\nimport { property2path } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\n/**\n * try to get the proxy-object from a data-node. if can't then from it's parent's proxy\n * @param dataNode \n * @param [property] - the property as the dataNode is assigned on its parent\n */\nfunction getProxyValue(dataNode: DataNode, property?: string): any {\n\tif(dataNode[ND].proxyNode && dataNode[ND].proxyNode[NID].status === proxyStatuses.ALIVE) {\n\t\treturn dataNode[ND].proxyNode[ND].proxy; // actual proxy of child node\n\t}\n\telse {\n\t\tif(!property) {\n\t\t\t// my property on the parent\n\t\t\tproperty = splitPath(dataNode[ND].propertyPath)[0] as string;\n\t\t}\n\n\t\tlet parentNode = dataNode[ND].parentNode;\n\n\t\tif(parentNode[ND].proxyNode && parentNode[ND].proxyNode[NID].status === proxyStatuses.ALIVE) {\n\t\t\treturn parentNode[ND].proxyNode[ND].proxy[ property ]; // proxy or primitive via parent's proxy object\n\t\t}\n\t\telse {\n\t\t\t// if we reached here then probably we are on a capture phase of a deep deletion.\n\t\t\t// for example 'obj.sub1.sub2' gets 'delete obj.sub1' so now there are no values for 'sub2' nor its parent 'sub1'.\n\t\t\t// the warning is turned off because this situation seems okay\n\t\t\t// console.warn(`reached a capture level where neither child not parent proxy-nodes exist`);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n/**\n * process event and then bubble up and capture down the data tree\n * @param dataNode\n * @param property\n * @param oldValue\n * @param wasOldValueProxy\n * @param value\n * @param isValueProxy\n */\nexport function initEmitEvent(\n\tdataNode: DataNode,\n\tproperty: string,\n\toldValue: any,\n\twasOldValueProxy: boolean,\n\tvalue: any,\n\tisValueProxy: boolean,\n) {\n\tif(oldValue === value // no new change was made\n\t|| !dataNode[ND].proxyNode) { // proxy-node is detached from data-node\n\t\treturn;\n\t}\n\n\tlet proxyNode = dataNode[ND].proxyNode;\n\tif(proxyNode[NID].status !== proxyStatuses.ALIVE) { // altered a deleted proxy\n\t\treturn;\n\t}\n\n\tlet changeType = eventNames.update;\n\tif(value === undefined) {\n\t\tchangeType = eventNames.delete;\n\t} else if(oldValue === undefined) {\n\t\tchangeType = eventNames.create;\n\t}\n\n\tlet deferredEvents: DeferredEvent[];\n\t// altering properties of an array that's in the middle of a splicing phase\n\tif(dataNode[NID].status === nodeStatuses.SPLICING) {\n\t\t// initiate (if needed) an object to hold side effect events\n\t\tif(!dataNode[ND].deferredEvents) {\n\t\t\tdataNode[ND].deferredEvents = [];\n\t\t}\n\t\t// save a reference to the deferredEvents\n\t\tdeferredEvents = dataNode[ND].deferredEvents;\n\t}\n\n\tlet path;\n\tif(dataNode[property]) { // changed a property which has its own data node on the tree\n\t\tdataNode = dataNode[property];\n\t\tpath = '';\n\t} else {\n\t\tpath = property2path(proxyNode[ND].target, property);\n\t}\n\n\tlet change: ChangeEvent = {\n\t\tpath, value, oldValue, type: changeType,\n\t};\n\n\tif(!deferredEvents) {\n\t\tbubbleEmit(dataNode, change, property);\n\t\n\t\tif(wasOldValueProxy || isValueProxy) { // old value or new value are proxy meaning they are objects with children\n\t\t\tcaptureEmit(dataNode, change);\n\t\t}\n\t}\n\telse {\n\t\tdeferredEvents.push({dataNode, change, shouldCapture: wasOldValueProxy || isValueProxy});\n\t}\n}\n\n/**\n * bubbling phase - go up the data tree and emit\n * @param dataNode\n * @param change\n * @param [property] - property name of the data-node (i.e. as the data-node is assigned to its parent)\n */\nfunction bubbleEmit(dataNode: DataNode, change: ChangeEvent, property?: string): void {\n\tif(dataNode[NID].status === nodeStatuses.STOPPED) {\n\t\treturn; // not allowed to emit\n\t}\n\n\tlet thisValue = getProxyValue(dataNode, property);\n\n\tif(change.path === '') { // iterate over 'shallow' listeners\n\t\titerateAndEmit(dataNode[ND].listeners.shallow, thisValue, change);\n\t}\n\n\t// iterate over 'deep' listeners\n\titerateAndEmit(dataNode[ND].listeners.deep, thisValue, change);\n\n\tif(!dataNode[ND].parentNode[ND].isTreePrototype) { // we are not on root node yet\n\t\t// create a shallow copy of 'change' and update its path\n\t\t// (we don't want to alter the 'change' object that was just emitted to a listener)\n\t\tlet nextChange: ChangeEvent = {\n\t\t\t...change,\n\t\t\tpath: dataNode[ND].propertyPath + change.path\n\t\t};\n\n\t\tbubbleEmit(dataNode[ND].parentNode, nextChange);\n\t}\n}\n\n/**\n * capturing phase - go down the data tree and emit\n * @param dataNode\n * @param change\n */\nfunction captureEmit(dataNode: DataNode, change: ChangeEvent): void {\n\tlet keys = Object.keys(dataNode);\n\tfor(let key of keys) {\n\t\tlet subValue = (typeof change.value === 'object' && change.value !== null) ? change.value[key] : undefined;\n\t\tlet subOldValue = (typeof change.oldValue === 'object' && change.oldValue !== null) ? change.oldValue[key] : undefined;\n\t\tif(subValue !== subOldValue) { //if not both undefined or same primitive or the same object\n\t\t\tlet changeType = eventNames.update;\n\t\t\tif(subValue === undefined) {\n\t\t\t\tchangeType = eventNames.delete;\n\t\t\t} else if(subOldValue === undefined) {\n\t\t\t\tchangeType = eventNames.create;\n\t\t\t}\n\n\t\t\tlet subChange: ChangeEvent = {\n\t\t\t\tpath: '',\n\t\t\t\toldValue: subOldValue,\n\t\t\t\tvalue: subValue,\n\t\t\t\ttype: changeType\n\t\t\t}\n\n\t\t\t// failing the status check will not emit for current property (but sub-properties might still be forcibly active)\n\t\t\tlet childNode = dataNode[key];\n\t\t\tif(childNode[NID].status !== nodeStatuses.STOPPED) {\n\t\t\t\tlet thisValue = getProxyValue(childNode, key);\n\t\t\t\titerateAndEmit(childNode[ND].listeners.shallow, thisValue, subChange);\n\t\t\t}\n\n\t\t\tcaptureEmit(childNode, subChange);\n\t\t}\n\t}\n}\n\n/**\n * iterate over an array of listeners, handle 'once' listeners and emit\n * @param listenersArr \n * @param thisValue \n * @param change \n */\nfunction iterateAndEmit(listenersArr: ListenerData[], thisValue: any, change: ChangeEvent): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listener = listenersArr[i];\n\t\tif(listener.type.includes(change.type)) {\n\t\t\tif(listener.once === true) {\n\t\t\t\tlistenersArr.splice(i, 1);\n\t\t\t}\n\t\t\tlistener.func.call(thisValue, change);\n\t\t}\n\t}\n}\n\n/**\n * process special event for a built-in method and then bubble up the data tree\n * @param dataNode\n * @param funcName - the method's name\n * @param funcArgs - the method's arguments\n * @param oldValue\n * @param value\n */\nexport function initFunctionEmitEvent(\n\tdataNode: DataNode,\n\tfuncName: eventNames,\n\tfuncArgs: ChangeEvent['args'],\n\toldValue: any,\n\tvalue: any,\n) {\n\tlet change: ChangeEvent = {\n\t\tpath: '', value, oldValue, type: funcName, args: funcArgs,\n\t};\n\n\tbubbleEmit(dataNode, change);\n\n\tif(dataNode[ND].deferredEvents) {\n\t\t// manually handle the side-effect events that were caught\n\t\t// in order to not bubble up, but should capture down\n\t\tfor(let event of dataNode[ND].deferredEvents) {\n\t\t\tif(event.change.path === '') {\n\t\t\t\t// no path means its an event directly on the property, not on the parent.\n\t\t\t\t// i.e: not an event with path \"0\" on \".arr\", but an event with no path on \".arr[0]\".\n\t\t\t\t// function event on \"arr\" already ran, but now a regular event on \"arr[0]\" is due\n\t\t\t\tlet thisValue = getProxyValue(event.dataNode);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.shallow, thisValue, event.change);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.deep, thisValue, event.change);\n\t\t\t}\n\n\t\t\tif(event.shouldCapture) {\n\t\t\t\tcaptureEmit(event.dataNode, event.change);\n\t\t\t}\n\t\t}\n\t\tdelete dataNode[ND].deferredEvents;\n\t}\n\telse {\n\t\tconsole.warn(`no side effect events for ${funcName} were made`);\n\t}\n}","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Proxy methods are methods that will proxy JS built-in methods.\n// For examply, the proxy function for \"splice\" will handle some event stuff and then use\n// the actual \"splice\" function internally\n\"use strict\"\n\nimport { nodeStatuses, eventNames, ND, NID, DataNode, ProxyNode } from './globals';\nimport { initFunctionEmitEvent } from './event-emitter';\n\n/**\n * a wrapper function for the 'splice' method\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * \n * @param start \n * @param deleteCount \n * @param items - rest of arguments\n */\nexport function splice(\n\tdataNode: DataNode,\n\tproxyNode: ProxyNode,\n\tstart: number,\n\tdeleteCount: number,\n\t...items: any[]\n): any[] {\n\tif(dataNode[NID].status !== nodeStatuses.ACTIVE) {\n\t\treturn Array.prototype.splice.call(proxyNode[ND].proxy, start, deleteCount, ...items);\n\t}\n\n\tlet isActiveByInheritance = !dataNode[NID].hasOwnProperty('status');\n\tdataNode[NID].status = nodeStatuses.SPLICING;\n\tlet oldValue = proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.splice.call(proxyNode[ND].proxy, start, deleteCount, ...items); // creates many side-effect events\n\tlet args = { start, deleteCount, items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete dataNode[NID].status;\n\t} else {\n\t\tdataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\n\tinitFunctionEmitEvent(dataNode, eventNames.splice, args, oldValue, proxyNode[ND].target);\n\n\treturn deleted;\n}\n\n/**\n * a wrapper function for the 'shift' method\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n */\nexport function shift(dataNode: DataNode, proxyNode: ProxyNode): any {\n\tif(dataNode[NID].status !== nodeStatuses.ACTIVE) {\n\t\t// if not active then run regular `shift`\n\t\t// which will reach the `set` of the ProxyHandler and will be blocked or events stopped, etc.\n\t\treturn Array.prototype.shift.call(proxyNode[ND].proxy);\n\t}\n\n\tlet isActiveByInheritance = !dataNode[NID].hasOwnProperty('status');\n\tdataNode[NID].status = nodeStatuses.SPLICING;\n\tlet oldValue = proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.shift.call(proxyNode[ND].proxy); // creates many side-effect events\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete dataNode[NID].status;\n\t} else {\n\t\tdataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\n\tinitFunctionEmitEvent(dataNode, eventNames.shift, {}, oldValue, proxyNode[ND].target);\n\n\treturn deleted;\n}\n\n/**\n * a wrapper function for the 'unshift' method\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * \n * @param items \n */\nexport function unshift(dataNode: DataNode, proxyNode: ProxyNode, ...items: any[]): number {\n\tif(dataNode[NID].status !== nodeStatuses.ACTIVE) {\n\t\treturn Array.prototype.shift.call(proxyNode[ND].proxy) as number;\n\t}\n\n\tlet isActiveByInheritance = !dataNode[NID].hasOwnProperty('status');\n\tdataNode[NID].status = nodeStatuses.SPLICING;\n\tlet oldValue = proxyNode[ND].target.slice(0);\n\tlet newLength: number = Array.prototype.unshift.call(proxyNode[ND].proxy, ...items); // creates many side-effect events\n\tlet args = { items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete dataNode[NID].status;\n\t} else {\n\t\tdataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\n\tinitFunctionEmitEvent(dataNode, eventNames.unshift, args, oldValue, proxyNode[ND].target);\n\n\treturn newLength;\n}\n","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, nodeStatuses, proxyStatuses, ND, NID, SomeProxy, DataNode, ProxyNode, TargetVariable, ProxserveInterface } from './globals';\nimport { unproxify, createNodes } from './supporting-functions';\nimport * as pseudoMethods from './pseudo-methods';\nimport * as proxyMethods from './proxy-methods';\nimport { realtypeof, splitPath, evalPath } from './general-functions';\nimport { initEmitEvent } from './event-emitter';\n\n/**\n * save an array of all reserved function names\n * and also add synonyms to these functions\n */\nlet pseudoMethodsNames = Object.keys(pseudoMethods);\nfor(let i = pseudoMethodsNames.length - 1; i >= 0; i--) {\n\tlet name = pseudoMethodsNames[i];\n\tlet synonym = '$'+name;\n\tpseudoMethods[synonym] = pseudoMethods[name];\n\tpseudoMethodsNames.push(synonym);\n}\n\ninterface ConstructorOptions {\n\tstrict: boolean;\n\temitMethods: boolean;\n\tdebug?: {\n\t\tdestroyDelay: number;\n\t};\n}\n\nexport class Proxserve implements ProxserveInterface {\n\tstrict: boolean;\n\temitMethods: boolean;\n\tdestroyDelay: number;\n\tdataTree: DataNode;\n\tproxyTree: ProxyNode;\n\n\t/**\n\t * construct a new proxserve instance\n\t * @param target \n\t * @param [options]\n\t * \t@property [options.strict] - should destroy detached child-objects or deleted properties automatically\n\t * \t@property [options.emitMethods] - should splice/shift/unshift emit one event or all CRUD events\n\t */\n\tconstructor(target: TargetVariable, options: ConstructorOptions = {} as any) {\n\t\tconst {\n\t\t\tstrict = true,\n\t\t\temitMethods = true,\n\t\t\tdebug = { destroyDelay: 1000 },\n\t\t} = options;\n\n\t\tthis.strict = strict;\n\t\tthis.emitMethods = emitMethods;\n\t\tthis.destroyDelay = debug.destroyDelay;\n\n\t\tlet dataTreePrototype: DataNode = {\n\t\t\t[NID]: { status: nodeStatuses.ACTIVE },\n\t\t\t[ND]: { isTreePrototype: true } as DataNode[typeof ND],\n\t\t};\n\t\tlet proxyTreePrototype: ProxyNode = {\n\t\t\t[NID]: { status: proxyStatuses.ALIVE },\n\t\t\t[ND]: { isTreePrototype: true } as ProxyNode[typeof ND],\n\t\t};\n\n\t\tconst newNodes = createNodes(dataTreePrototype, proxyTreePrototype, '', target);\n\t\tthis.dataTree = newNodes.dataNode;\n\t\tthis.proxyTree = newNodes.proxyNode;\n\n\t\t// `as any` to stop TS from erroring because it wants us to return the `this` object\n\t\t// but instead we are returning a different object\n\t\treturn this.createProxy(this.dataTree) as any;\n\t}\n\n\t/**\n\t * create a new proxy and a new node for a property of the parent's target-object\n\t * @param {Object} parentDataNode\n\t * @param {String} [targetProperty]\n\t */\n\tcreateProxy(parentDataNode: DataNode, targetProperty?: string): SomeProxy {\n\t\tlet parentProxyNode = parentDataNode[ND].proxyNode\n\t\tlet dataNode: DataNode, proxyNode: ProxyNode;\n\n\t\tif(targetProperty === undefined) { //refering to own node and not a child property (meaning root object)\n\t\t\tdataNode = parentDataNode;\n\t\t\tproxyNode = parentProxyNode;\n\t\t}\n\t\telse {\n\t\t\t//creates new or reset an existing data-node and then creates a new proxy-node\n\t\t\tconst newNodes = createNodes(\n\t\t\t\tparentDataNode,\n\t\t\t\tparentProxyNode,\n\t\t\t\ttargetProperty,\n\t\t\t\tparentProxyNode[ND].target[targetProperty],\n\t\t\t);\n\t\t\tdataNode = newNodes.dataNode;\n\t\t\tproxyNode = newNodes.proxyNode;\n\t\t}\n\n\t\tlet target = proxyNode[ND].target;\n\n\t\tlet typeoftarget = realtypeof(target);\n\n\t\tif(proxyTypes[typeoftarget]) {\n\t\t\tlet revocable = Proxy.revocable<TargetVariable>(target, {\n\t\t\t\tget: (target: TargetVariable/*same as parent scope 'target'*/, property: string|symbol, proxy) => {\n\t\t\t\t\tif(this.emitMethods && Object.prototype.hasOwnProperty.call(proxyMethods, property) && property in Object.getPrototypeOf(target)) {\n\t\t\t\t\t\t// use a proxy method instead of the built-in method that is on the prototype chain\n\t\t\t\t\t\treturn proxyMethods[property].bind(this, dataNode, proxyNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if(pseudoMethodsNames.includes(property as string) && typeof target[property] === 'undefined') {\n\t\t\t\t\t\t// can access a pseudo function (or its synonym) if their keywords isn't used\n\t\t\t\t\t\treturn pseudoMethods[property].bind(this, dataNode, proxyNode);\n\t\t\t\t\t}\n\t\t\t\t\telse if(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\treturn target[property]; // non-enumerable or non-path'able aren't proxied\n\t\t\t\t\t}\n\t\t\t\t\telse if(proxyNode[property] // there's a child node\n\t\t\t\t\t\t\t&& proxyNode[property][ND].proxy // it holds a proxy\n\t\t\t\t\t\t\t&& proxyNode[property][NID].status === proxyStatuses.ALIVE) {\n\t\t\t\t\t\treturn proxyNode[property][ND].proxy;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn target[property];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\n\t\t\t\tset: (target/*same as parent scope 'target'*/, property, value, proxy) => { //'receiver' is proxy\n\t\t\t\t\t/**\n\t\t\t\t\t * property can be a regular object because of 3 possible reasons:\n\t\t\t\t\t * 1. proxy is deleted from tree but user keeps accessing it then it means he saved a reference\n\t\t\t\t\t * 2. it is a non-enumerable property which means it was intentionally hidden\n\t\t\t\t\t * 3. property is a symbol and symbols can't be proxied because we can't create a normal path for them.\n\t\t\t\t\t *    these properties are not proxied and should not emit change-event.\n\t\t\t\t\t *    except for: length\n\t\t\t\t\t * TODO - make a list of all possible properties exceptions (maybe function 'name'?)\n\t\t\t\t\t */\n\t\t\t\t\tif(dataNode[NID].status === nodeStatuses.BLOCKED) { //blocked from changing values\n\t\t\t\t\t\tconsole.error('object is blocked. can\\'t change value of property:', property);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(typeof property === 'symbol') {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(property !== 'length' && !target.propertyIsEnumerable(property)) {\n\t\t\t\t\t\t//if setting a whole new property then it is non-enumerable (yet) so a further test is needed\n\t\t\t\t\t\tlet descriptor = Object.getOwnPropertyDescriptor(target, property);\n\t\t\t\t\t\tif(typeof descriptor === 'object' && descriptor.enumerable === false) { //property was previously set\n\t\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; // should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t// about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = proxyStatuses.DELETED;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; // detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(this.strict) {\n\t\t\t\t\t\t\t// postpone this cpu intense function for later, probably when proxserve is not in use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, this.destroyDelay, proxyNode[property][ND].proxy); \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = unproxify(value);\n\t\t\t\t\ttarget[property] = value; //assign new value\n\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\tlet typeofvalue = realtypeof(value);\n\t\t\t\t\tif(proxyTypes[typeofvalue]) {\n\t\t\t\t\t\tthis.createProxy(dataNode, property); //if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * TODO - this function is incomplete and doesn't handle all of 'descriptor' scenarios\n\t\t\t\t */\n\t\t\t\tdefineProperty: (target/*same as parent scope 'target'*/, property, descriptor) => {\n\t\t\t\t\tif(typeof property === 'symbol') {\n\t\t\t\t\t\tObject.defineProperty(target, property, descriptor);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = proxyStatuses.DELETED;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(this.strict) {\n\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, this.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdescriptor.value = unproxify(descriptor.value);\n\t\t\t\t\tObject.defineProperty(target, property, descriptor); //defining the new value\n\t\t\t\t\tlet value = descriptor.value;\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\t//excluding non-enumerable properties from being proxied\n\t\t\t\t\tlet typeofvalue = realtypeof(descriptor.value);\n\t\t\t\t\tif(proxyTypes[typeofvalue] && descriptor.enumerable === true) {\n\t\t\t\t\t\tthis.createProxy(dataNode, property); //if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\tdeleteProperty: (target/*same as parent scope 'target'*/, property) => {\n\t\t\t\t\tif(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\t//non-proxied properties simply get deleted and nothing more\n\t\t\t\t\t\tdelete target[property];\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(dataNode[NID].status === nodeStatuses.BLOCKED) { //blocked from changing values\n\t\t\t\t\t\tconsole.error(`can't delete property '${property}'. object is blocked.`);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(property in target) {\n\t\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\t\tproxyNode[property][NID].status = proxyStatuses.DELETED;\n\t\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\t\tif(this.strict) {\n\t\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, this.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete target[property]; //actual delete\n\n\t\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, undefined, false);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn true; //do nothing because there's nothing to delete\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as ProxyHandler<TargetVariable>) as { proxy: SomeProxy, revoke: ()=>void };\n\n\t\t\tproxyNode[ND].proxy = revocable.proxy;\n\t\t\tproxyNode[ND].revoke = revocable.revoke;\n\n\t\t\tif(proxyTypes[typeoftarget]) {\n\t\t\t\tlet keys = Object.keys(target); //handles both Objects and Arrays\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\tlet typeofproperty = realtypeof(target[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\tthis.createProxy(dataNode, key); //recursively make child objects also proxies\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.warn(`Type of \"${typeoftarget}\" is not implemented`);\n\t\t\t}\n\n\t\t\treturn revocable.proxy;\n\t\t}\n\t\telse {\n\t\t\tconst types = Object.keys(proxyTypes);\n\t\t\tthrow new Error(`Must observe an ${types.join('/')}`);\n\t\t}\n\t}\n\n\t/**\n\t * Recursively revoke proxies, allowing them to be garbage collected.\n\t * this functions delays 1000 milliseconds to let time for all events to finish\n\t * @param {*} proxy \n\t */\n\tstatic destroy(proxy) {\n\t\tlet proxyNode;\n\t\ttry {\n\t\t\t[, proxyNode] = proxy.$getProxserveNodes();\n\t\t} catch(error) {\n\t\t\treturn; // proxy variable isn't a proxy\n\t\t}\n\n\t\tif(proxyNode[NID].status === proxyStatuses.ALIVE) {\n\t\t\tproxyNode[NID].status = proxyStatuses.DELETED;\n\t\t}\n\n\t\tlet typeofproxy = realtypeof(proxy);\n\n\t\tif(proxyTypes[typeofproxy]) {\n\t\t\tlet keys = Object.keys(proxy); // handles both Objects and Arrays\n\t\t\tfor(let key of keys) {\n\t\t\t\ttry {\n\t\t\t\t\tlet typeofproperty = realtypeof(proxy[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\t// going to proxy[key], which is deleted, will return the original target so we will bypass it\n\t\t\t\t\t\tProxserve.destroy(proxyNode[key][ND].proxy);\n\t\t\t\t\t}\n\t\t\t\t} catch(error) {\n\t\t\t\t\tconsole.error(error); // don't throw and kill the whole process just if this iteration fails\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproxyNode[ND].revoke();\n\t\t\t//proxyNode[ND].proxy = undefined;\n\t\t\tproxyNode[NID].status = proxyStatuses.REVOKED;\n\t\t}\n\t\telse {\n\t\t\tconsole.warn(`Type of \"${typeofproxy}\" is not implemented`);\n\t\t}\n\t}\n\n\tstatic splitPath(path) {\n\t\treturn splitPath(path);\n\t}\n\n\tstatic evalPath(obj, path) {\n\t\treturn evalPath(obj, path);\n\t}\n}"],"names":["$66763b9de58a4cbb$export$f7e0aa381a5261fc","Symbol","for","$66763b9de58a4cbb$export$d1c20e4ad7d32581","$66763b9de58a4cbb$export$94b8be4ec3303efd","Object","Array","nodeStatuses","proxyStatuses","eventNames","$fda00bc7ddcd3bc7$export$99a2acdf670c1bf4","variable","rawType","prototype","toString","call","substring","length","$66763b9de58a4cbb$export$eb0c55c6f2ee7170","$66763b9de58a4cbb$export$89e04a1d3d3065f6","$66763b9de58a4cbb$export$4a2e650c134b86af","WeakSet","$fda00bc7ddcd3bc7$export$824c337f43f2b64d","path","i","betweenBrackets","onlyDigits","resultsArr","tmp","char","push","parseInt","code","charCodeAt","$a72f28e28e24748b$export$1b787634d8e3bf02","obj","property","Error","typeofobj","console","warn","$a72f28e28e24748b$export$a58c3ed528c9c399","value","typeofvalue","target","$getOriginalTarget","error","keys","key","$a72f28e28e24748b$export$953dd193a01bd6ec","parentDataNode","parentProxyNode","propertyPath","proxyNode","dataNode","create","parentNode","listeners","shallow","deep","status","isTreePrototype","assign","$cb4cc1e2f387f5a6$export$fa6813432f753b0d","STOPPED","$cb4cc1e2f387f5a6$export$837bd02682cd3db9","BLOCKED","$cb4cc1e2f387f5a6$export$234c45b355edd85b","force","this","dataTree","ACTIVE","$cb4cc1e2f387f5a6$export$af631764ddc44097","events","listener","options","id","once","isArray","event","names","join","optionsFromListener","undefined","segments","listenersPool","listenerObj","type","func","$cb4cc1e2f387f5a6$export$d2de3aaeafa91619","$cb4cc1e2f387f5a6$var$removeById","listenersArr","splice","$cb4cc1e2f387f5a6$export$b03e9483f936dccb","arguments","fullPath","$cb4cc1e2f387f5a6$export$6f2e3a6079f109b1","$cb4cc1e2f387f5a6$export$35f261dd63190ac1","$cb4cc1e2f387f5a6$export$c3c6db5039118967","$cb4cc1e2f387f5a6$export$8caee43385408ac4","$08aa8f4cfdbb0713$var$getProxyValue","ALIVE","proxy","$08aa8f4cfdbb0713$export$febbc75e71f4ca1b","oldValue","wasOldValueProxy","isValueProxy","deferredEvents","changeType","update","delete","SPLICING","change","shouldCapture","$08aa8f4cfdbb0713$var$bubbleEmit","$08aa8f4cfdbb0713$var$captureEmit","thisValue","$08aa8f4cfdbb0713$var$iterateAndEmit","nextChange","subValue","subOldValue","subChange","childNode","includes","$08aa8f4cfdbb0713$export$29f2d3a310653bb4","funcName","funcArgs","args","$f5798ab020ffb663$export$869882364835d202","start","deleteCount","items","isActiveByInheritance","hasOwnProperty","slice","deleted","$f5798ab020ffb663$export$fba63a578e423eb","shift","$f5798ab020ffb663$export$37cdb546b806ae87","newLength","unshift","$f3a59425b0ffb76f$var$pseudoMethodsNames","$cb4cc1e2f387f5a6$exports","name","synonym","$f3a59425b0ffb76f$export$d402cf8388053971","createProxy","targetProperty","newNodes","target1","typeoftarget","revocable","Proxy","get","emitMethods","$f5798ab020ffb663$exports","getPrototypeOf","bind","propertyIsEnumerable","set","descriptor","getOwnPropertyDescriptor","enumerable","isOldValueProxy","DELETED","strict","setTimeout","destroy","destroyDelay","defineProperty","deleteProperty","revoke","typeofproperty","types","static","$getProxserveNodes","typeofproxy","REVOKED","path1","object","$fda00bc7ddcd3bc7$export$8ffa680996c65fde","constructor","debug","proxyTree"],"version":3,"file":"index.min.js.map"}