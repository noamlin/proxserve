{"mappings":"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","sources":["src/globals.ts","src/general-functions.ts","src/supporting-functions.ts","src/pseudo-methods.ts","src/event-emitter.ts","src/proxy-methods.ts","src/index.ts"],"sourcesContent":["/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nexport const ND = Symbol.for('proxserve_node_data'); // key for the data of a node\nexport const NID = Symbol.for('proxserve_node_inherited_data'); // key for the inherited data of a node\n\n// acceptable types to be proxied\nexport const proxyTypes = {\n\t\"Object\": true,\n\t\"Array\": true,\n};\n\n// statuses of data-nodes\nexport enum nodeStatuses {\n\tACTIVE = 'active',\n\tSTOPPED = 'stopped',\n\tBLOCKED = 'blocked',\n\tSPLICING = 'splicing',\n};\n\n// statuses of proxies\nexport enum proxyStatuses {\n\tALIVE = 'alive',\n\tDELETED = 'deleted',\n\tREVOKED = 'revoked',\n};\n\n// event names that can be emitted\nexport enum eventNamesObject {\n\tcreate = 'create',\n\tupdate = 'update',\n\tdelete = 'delete',\n\tsplice = 'splice',\n\tshift = 'shift',\n\tunshift = 'unshift',\n};","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { SomeObject, SomeArray, variableTypes } from './types';\n\n/**\n * return a string representing the full type of the variable\n */\nexport function realtypeof(variable: any): variableTypes {\n\tlet rawType = Object.prototype.toString.call(variable); //[object Object], [object Array], [object Number]...\n\treturn rawType.substring(8, rawType.length - 1) as variableTypes;\n}\n\n/**\n * check if variable is a number or a string of a number\n * @param variable \n */\n/*export function isNumeric(variable: any): boolean {\n\tif(typeof variable === 'string' && variable === '') {\n\t\treturn false;\n\t}\n\t\n\treturn !isNaN(variable as number);\n}*/\n\n/**\n * recursively clones objects and array\n */\nconst simpleCloneSet = new WeakSet();\nexport function simpleClone(variable: any): any {\n\tlet typeofvar = realtypeof(variable);\n\n\tif(typeofvar === 'Object') {\n\t\tconst obj = variable as SomeObject;\n\t\tsimpleCloneSet.add(obj);\n\t\tconst cloned = {};\n\t\tlet keys = Object.keys(obj);\n\t\tfor(let key of keys) {\n\t\t\tif(simpleCloneSet.has(obj[key])) {\n\t\t\t\tcloned[key] = obj[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[key] = simpleClone(obj[key]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse if(typeofvar === 'Array') {\n\t\tconst arr = variable as SomeArray;\n\t\tsimpleCloneSet.add(arr);\n\t\tconst cloned = [] as any[];\n\t\tfor(let i = 0; i < arr.length; i++) {\n\t\t\tif(simpleCloneSet.has(arr[i])) {\n\t\t\t\tcloned[i] = arr[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[i] = simpleClone(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse { // hopefully a primitive\n\t\tif(typeofvar !== 'Undefined' && typeofvar !== 'Null' && typeofvar !== 'Boolean' && typeofvar !== 'Number'\n\t\t&& typeofvar !== 'BigInt' && typeofvar !== 'String') {\n\t\t\tconsole.warn(`Can't clone a variable of type ${typeofvar}`);\n\t\t}\n\t\treturn variable;\n\t}\n}\n\n/**\n * splits a path to an array of properties\n * (benchmarked and is faster than regex and split())\n * @param path \n */\nexport function splitPath(path: string): Array<string|number> {\n\tif(typeof path !== 'string' || path === '') {\n\t\treturn [];\n\t}\n\t\n\tlet i = 0, betweenBrackets = false, onlyDigits = false;\n\t//loop will skip over openning '.' or '['\n\tif(path[0] === '.') {\n\t\ti = 1;\n\t} else if(path[0] === '[') {\n\t\ti = 1;\n\t\tbetweenBrackets = true;\n\t\tonlyDigits = true;\n\t}\n\n\tlet resultsArr = [] as Array<string|number>;\n\tlet tmp = '';\n\tfor(; i < path.length; i++) {\n\t\tlet char = path[i];\n\n\t\tif(betweenBrackets) {\n\t\t\tif(char === ']') {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tresultsArr.push(parseInt(tmp, 10));\n\t\t\t\t} else {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t}\n\n\t\t\t\tbetweenBrackets = false;\n\t\t\t\tonlyDigits = false;\n\t\t\t\ttmp = '';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tlet code = char.charCodeAt(0);\n\t\t\t\t\tif(code < 48 || code > 57) { //less than '0' char or greater than '9' char\n\t\t\t\t\t\tonlyDigits = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(char === '[') {\n\t\t\t\tbetweenBrackets = true;\n\t\t\t\tonlyDigits = true;\n\t\t\t}\n\t\t\t\n\t\t\t//check if starting a new property but avoid special case of [prop][prop]\n\t\t\tif(char === '.' || char === '[') {\n\t\t\t\tif(tmp !== '') {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t\ttmp = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t}\n\tif(tmp !== '') {\n\t\tresultsArr.push(tmp);\n\t}\n\treturn resultsArr;\n}\n\n/**\n * evaluate a long path and return the designated object and its referred property\n */\nexport function evalPath(obj: SomeObject, path: string): {\n\tobject: SomeObject,\n\tproperty: string|number,\n\tvalue: any,\n} {\n\tif(path === '') {\n\t\treturn {\n\t\t\tobject: obj,\n\t\t\tproperty: '',\n\t\t\tvalue: obj,\n\t\t};\n\t}\n\n\tlet segments = splitPath(path);\n\tlet i: number;\n\tfor(i = 0; i <= segments.length - 2; i++) { // iterate until one before last property because they all must exist\n\t\tobj = obj[segments[i]];\n\t\tif(typeof obj === 'undefined') {\n\t\t\tthrow new Error(`Invalid path was given - \"${path}\"`);\n\t\t}\n\t}\n\treturn {\n\t\tobject: obj,\n\t\tproperty: segments[i],\n\t\tvalue: obj[ segments[i] ],\n\t};\n}","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, ND, NID } from './globals';\nimport { DataNode, ProxyNode, TargetVariable, ListenerData } from './types';\nimport { realtypeof } from './general-functions';\n\n/**\n * Convert property name to valid path segment\n */\nexport function property2path(obj: any, property: string|number): string {\n\tif(typeof property === 'symbol') {\n\t\tthrow new Error(`property of type \"symbol\" isn't path'able`);\n\t}\n\n\tconst typeofobj = realtypeof(obj);\n\tswitch(typeofobj) {\n\t\tcase 'Object': {\n\t\t\treturn `.${property}`;\n\t\t}\n\t\tcase 'Array': {\n\t\t\treturn `[${property}]`;\n\t\t}\n\t\tdefault: {\n\t\t\tconsole.warn(`Not Implemented (type of '${typeofobj}')`);\n\t\t\treturn property as string;\n\t\t}\n\t}\n}\n\n/**\n * recursively switch between all proxies to their original targets.\n * note: original targets should never hold proxies under them,\n * thus altering the object references (getting from 'value') should be ok.\n * if whoever uses this library decides to\n * \t1. create a proxy with children (sub-proxies)\n * \t2. create a regular object\n * \t3. adding sub-proxies to the regular object\n * \t4. attaching the regular object to the proxy\n * then this regular object will be altered.\n */\nexport function unproxify(value: any): any {\n\tconst typeofvalue = realtypeof(value);\n\n\tif(proxyTypes[typeofvalue]) {\n\t\tlet target = value;\n\t\ttry {\n\t\t\ttarget = value.$getOriginalTarget();\n\t\t} catch(error) {}\n\n\t\tswitch(typeofvalue) {\n\t\t\tcase 'Object':\n\t\t\t\tlet keys = Object.keys(target);\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\ttarget[key] = unproxify(target[key]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Array':\n\t\t\t\tfor(let i=0; i < target.length; i++) {\n\t\t\t\t\ttarget[i] = unproxify(target[i]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Not Implemented (type of '${typeofvalue}')`);\n\t\t}\n\n\t\treturn target;\n\t}\n\telse {\n\t\treturn value; // primitive\n\t}\n}\n\n/**\n * create or reset a node in a tree of meta-data (mainly path related)\n * and optionally create a node in a tree of proxy data (mainly objects related)\n */\nexport function createNodes(\n\tparentDataNode: DataNode,\n\tproperty: string | number,\n\tparentProxyNode?: ProxyNode,\n\ttarget?: TargetVariable,\n): { dataNode: DataNode, proxyNode: ProxyNode } {\n\t//handle property path\n\tlet propertyPath: string;\n\tif(parentProxyNode?.[ND].target) {\n\t\tpropertyPath = property2path(parentProxyNode[ND].target, property);\n\t} else {\n\t\tpropertyPath = property2path({}, property); // if parent doesn't have target then treat it as object\n\t}\n\t\n\t//handle data node\n\tlet dataNode: DataNode = parentDataNode[property]; // try to receive existing data-node\n\tif(!dataNode) {\n\t\tdataNode = {\n\t\t\t[NID]: Object.create(parentDataNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\tparentNode: parentDataNode,\n\t\t\t\tlisteners: {\n\t\t\t\t\tshallow: [] as ListenerData[],\n\t\t\t\t\tdeep: [] as ListenerData[],\n\t\t\t\t},\n\t\t\t}\n\t\t} as DataNode;\n\t\tparentDataNode[property] = dataNode;\n\t}\n\n\tdelete dataNode[NID].status; // clears old status in case a node previously existed\n\t// updates path (for rare case where parent was array and then changed to object or vice versa)\n\tif(!parentDataNode[ND].isTreePrototype) {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: parentDataNode[ND].path + propertyPath,\n\t\t\tpropertyPath\n\t\t});\n\t}\n\telse {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: '',\n\t\t\tpropertyPath: ''\n\t\t});\n\t}\n\n\t// handle proxy node\n\tlet proxyNode: ProxyNode;\n\tif(parentProxyNode) {\n\t\tproxyNode = {\n\t\t\t[NID]: Object.create(parentProxyNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\ttarget: target as TargetVariable,\n\t\t\t\tdataNode,\n\t\t\t},\n\t\t};\n\n\t\tparentProxyNode[property] = proxyNode;\n\n\t\t// attach nodes to each other\n\t\tdataNode[ND].proxyNode = proxyNode;\n\t} else {\n\t\t// hack to satisfy TS.\n\t\t// this scenario is dangerous and exists only for `on()` of future variables (paths) that don't yet exist\n\t\tproxyNode = undefined as unknown as ProxyNode;\n\t}\n\n\treturn { dataNode, proxyNode };\n}\n","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Pseudo methods are methods that aren't really on the object - not as a property nor via its prototype\n// thus they will not be retrieved via \"for..in\" and etcetera. Their property name is actually undefined, but\n// calling it will return the method via the JS proxy's \"get\" handler.\n// (i.e. someProxserve.pseudoFunction will return the pseudoFunction)\n\"use strict\"\n\nimport { eventNamesObject, nodeStatuses, ND, NID } from './globals';\nimport { ListenerData, StopFunction, BlockFunction, ActivateFunction, OnFunction, OnceFunction,\n\tRemoveListenerFunction, RemoveAllListenersFunction, GetOriginalTargetFunction, GetProxserveNodesFunction,\n\tPseudoThis, eventNames } from './types';\nimport { createNodes } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\nexport const stop = function stop(this: PseudoThis) {\n\tthis.dataNode[NID].status = nodeStatuses.STOPPED;\n} as StopFunction;\n\nexport const block = function block(this: PseudoThis) {\n\tthis.dataNode[NID].status = nodeStatuses.BLOCKED;\n} as BlockFunction;\n\nexport const activate = function activate(this: PseudoThis, force = false): void {\n\tif(force || this.dataNode === this.metadata.dataTree) { // force activation or we are on root proxy\n\t\tthis.dataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\telse {\n\t\tdelete this.dataNode[NID].status;\n\t}\n} as ActivateFunction;\n\nexport const on = function on(this: PseudoThis, args) {\n\tconst { path = '', listener, options = {} } = args;\n\tlet { events } = args;\n\n\toptions.deep = options.deep ?? false;\n\toptions.once = options.once ?? false;\n\n\tif((events as string) === 'change') {\n\t\tevents = Object.keys(eventNamesObject) as eventNames[]; // will listen to all events\n\t} else if(!Array.isArray(events)) {\n\t\tevents = [events];\n\t}\n\n\tfor(let event of events) {\n\t\tif(!eventNamesObject[event]) {\n\t\t\tconst names = Object.keys(eventNamesObject);\n\t\t\tthrow new Error(`${event} is not a valid event. valid events are ${names.join(',')}`);\n\t\t}\n\t}\n\t\n\tlet dataNode = this.dataNode;\n\tlet segments = splitPath(path);\n\tfor(let property of segments) { // traverse down the tree\n\t\tif(!dataNode[property]) {\n\t\t\t// create data-nodes if needed, but don't create/overwrite proxy-nodes\n\t\t\tcreateNodes(dataNode, property);\n\t\t}\n\n\t\tdataNode = dataNode[property];\n\t}\n\n\tlet listenersPool = dataNode[ND].listeners.shallow;\n\tif(options.deep) {\n\t\tlistenersPool = dataNode[ND].listeners.deep;\n\t}\n\n\tlet listenerObj = {\n\t\ttype: events,\n\t\tonce: options.once,\n\t\tfunc: listener\n\t} as ListenerData;\n\n\tif(options.id !== undefined) {\n\t\tlistenerObj.id = options.id;\n\t}\n\tlistenersPool.push(listenerObj);\n} as OnFunction;\n\nexport const once = function once(this: PseudoThis, args) {\n\tconst { events, path, listener, options = {} } = args;\n\toptions.once = true;\n\ton.call(this, { events, path, listener, options });\n} as OnceFunction;\n\nfunction removeById(listenersArr: ListenerData[], id: string | number | Function): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listenerObj = listenersArr[i];\n\t\tif((id !== undefined && listenerObj.id === id) || listenerObj.func === id) {\n\t\t\tlistenersArr.splice(i, 1);\n\t\t}\n\t}\n}\n\nexport const removeListener = function removeListener(this: PseudoThis, args) {\n\tconst { id, path = '' } = args;\n\tconst fullPath = `${this.dataNode[ND].path}${path}`;\n\tlet dataNode = this.dataNode;\n\tconst segments = splitPath(path);\n\n\t// traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove listener from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tremoveById(dataNode[ND].listeners.shallow, id);\n\tremoveById(dataNode[ND].listeners.deep, id);\n} as RemoveListenerFunction;\n\nexport const removeAllListeners = function removeAllListeners(this: PseudoThis, path = '') {\n\tconst fullPath = `${this.dataNode[ND].path}${path}`;\n\tconst segments = splitPath(path);\n\tlet dataNode = this.dataNode;\n\n\t//traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove all listeners from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tdataNode[ND].listeners.shallow = [] as ListenerData[];\n\tdataNode[ND].listeners.deep = [] as ListenerData[];\n} as RemoveAllListenersFunction;\n\nexport const getOriginalTarget = function getOriginalTarget(this: PseudoThis) {\n\treturn this.proxyNode[ND].target;\n} as GetOriginalTargetFunction;\n\nexport const getProxserveNodes = function getProxserveNodes(this: PseudoThis) {\n\treturn { dataNode: this.dataNode, proxyNode: this.proxyNode };\n} as GetProxserveNodesFunction;","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { eventNamesObject, nodeStatuses, proxyStatuses, ND, NID } from './globals';\nimport { eventNames, DataNode, ChangeEvent, DeferredEvent, ListenerData } from './types';\nimport { property2path } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\n/**\n * try to get the proxy-object from a data-node. if can't then from it's parent's proxy\n * @param dataNode \n * @param [property] - the property as the dataNode is assigned on its parent\n */\nfunction getProxyValue(dataNode: DataNode, property?: string): any {\n\tif(dataNode[ND].proxyNode && dataNode[ND].proxyNode[NID].status === proxyStatuses.ALIVE) {\n\t\treturn dataNode[ND].proxyNode[ND].proxy; // actual proxy of child node\n\t}\n\telse {\n\t\tif(!property) {\n\t\t\t// my property on the parent\n\t\t\tproperty = splitPath(dataNode[ND].propertyPath)[0] as string;\n\t\t}\n\n\t\tlet parentNode = dataNode[ND].parentNode;\n\n\t\tif(parentNode[ND].proxyNode && parentNode[ND].proxyNode[NID].status === proxyStatuses.ALIVE) {\n\t\t\treturn parentNode[ND].proxyNode[ND].proxy?.[property]; // proxy or primitive via parent's proxy object\n\t\t}\n\t\telse {\n\t\t\t// if we reached here then probably we are on a capture phase of a deep deletion.\n\t\t\t// for example 'obj.sub1.sub2' gets 'delete obj.sub1' so now there are no values for 'sub2' nor its parent 'sub1'.\n\t\t\t// the warning is turned off because this situation seems okay\n\t\t\t// console.warn(`reached a capture level where neither child not parent proxy-nodes exist`);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n/**\n * process event and then bubble up and capture down the data tree\n * @param dataNode\n * @param property\n * @param oldValue\n * @param wasOldValueProxy\n * @param value\n * @param isValueProxy\n */\nexport function initEmitEvent(\n\tdataNode: DataNode,\n\tproperty: string,\n\toldValue: any,\n\twasOldValueProxy: boolean,\n\tvalue: any,\n\tisValueProxy: boolean,\n) {\n\tif(oldValue === value // no new change was made\n\t|| !dataNode[ND].proxyNode) { // proxy-node is detached from data-node\n\t\treturn;\n\t}\n\n\tlet proxyNode = dataNode[ND].proxyNode;\n\tif(proxyNode[NID].status !== proxyStatuses.ALIVE) { // altered a deleted proxy\n\t\treturn;\n\t}\n\n\tlet changeType = eventNamesObject.update;\n\tif(value === undefined) {\n\t\tchangeType = eventNamesObject.delete;\n\t} else if(oldValue === undefined) {\n\t\tchangeType = eventNamesObject.create;\n\t}\n\n\tlet deferredEvents: DeferredEvent[] | undefined;\n\t// altering properties of an array that's in the middle of a splicing phase\n\tif(dataNode[NID].status === nodeStatuses.SPLICING) {\n\t\t// initiate (if needed) an object to hold side effect events\n\t\tif(!dataNode[ND].deferredEvents) {\n\t\t\tdataNode[ND].deferredEvents = [];\n\t\t}\n\t\t// save a reference to the deferredEvents\n\t\tdeferredEvents = dataNode[ND].deferredEvents;\n\t}\n\n\tlet path;\n\tif(dataNode[property]) { // changed a property which has its own data node on the tree\n\t\tdataNode = dataNode[property];\n\t\tpath = '';\n\t} else {\n\t\tpath = property2path(proxyNode[ND].target, property);\n\t}\n\n\tlet change: ChangeEvent = {\n\t\tpath, value, oldValue, type: changeType,\n\t};\n\n\tif(!deferredEvents) {\n\t\tbubbleEmit(dataNode, change, property);\n\t\n\t\tif(wasOldValueProxy || isValueProxy) { // old value or new value are proxy meaning they are objects with children\n\t\t\tcaptureEmit(dataNode, change);\n\t\t}\n\t}\n\telse {\n\t\tdeferredEvents.push({dataNode, change, shouldCapture: wasOldValueProxy || isValueProxy});\n\t}\n}\n\n/**\n * bubbling phase - go up the data tree and emit\n * @param dataNode\n * @param change\n * @param [property] - property name of the data-node (i.e. as the data-node is assigned to its parent)\n */\nfunction bubbleEmit(dataNode: DataNode, change: ChangeEvent, property?: string): void {\n\tif(dataNode[NID].status === nodeStatuses.STOPPED) {\n\t\treturn; // not allowed to emit\n\t}\n\n\tlet thisValue = getProxyValue(dataNode, property);\n\n\tif(change.path === '') { // iterate over 'shallow' listeners\n\t\titerateAndEmit(dataNode[ND].listeners.shallow, thisValue, change);\n\t}\n\n\t// iterate over 'deep' listeners\n\titerateAndEmit(dataNode[ND].listeners.deep, thisValue, change);\n\n\tif(!dataNode[ND].parentNode[ND].isTreePrototype) { // we are not on root node yet\n\t\t// create a shallow copy of 'change' and update its path\n\t\t// (we don't want to alter the 'change' object that was just emitted to a listener)\n\t\tlet nextChange: ChangeEvent = {\n\t\t\t...change,\n\t\t\tpath: dataNode[ND].propertyPath + change.path\n\t\t};\n\n\t\tbubbleEmit(dataNode[ND].parentNode, nextChange);\n\t}\n}\n\n/**\n * capturing phase - go down the data tree and emit\n * @param dataNode\n * @param change\n */\nfunction captureEmit(dataNode: DataNode, change: ChangeEvent): void {\n\tlet keys = Object.keys(dataNode);\n\tfor(let key of keys) {\n\t\tlet subValue = (typeof change.value === 'object' && change.value !== null) ? change.value[key] : undefined;\n\t\tlet subOldValue = (typeof change.oldValue === 'object' && change.oldValue !== null) ? change.oldValue[key] : undefined;\n\t\tif(subValue !== subOldValue) { //if not both undefined or same primitive or the same object\n\t\t\tlet changeType = eventNamesObject.update;\n\t\t\tif(subValue === undefined) {\n\t\t\t\tchangeType = eventNamesObject.delete;\n\t\t\t} else if(subOldValue === undefined) {\n\t\t\t\tchangeType = eventNamesObject.create;\n\t\t\t}\n\n\t\t\tlet subChange: ChangeEvent = {\n\t\t\t\tpath: '',\n\t\t\t\toldValue: subOldValue,\n\t\t\t\tvalue: subValue,\n\t\t\t\ttype: changeType\n\t\t\t}\n\n\t\t\t// failing the status check will not emit for current property (but sub-properties might still be forcibly active)\n\t\t\tlet childNode = dataNode[key];\n\t\t\tif(childNode[NID].status !== nodeStatuses.STOPPED) {\n\t\t\t\tlet thisValue = getProxyValue(childNode, key);\n\t\t\t\titerateAndEmit(childNode[ND].listeners.shallow, thisValue, subChange);\n\t\t\t}\n\n\t\t\tcaptureEmit(childNode, subChange);\n\t\t}\n\t}\n}\n\n/**\n * iterate over an array of listeners, handle 'once' listeners and emit\n * @param listenersArr \n * @param thisValue \n * @param change \n */\nfunction iterateAndEmit(listenersArr: ListenerData[], thisValue: any, change: ChangeEvent): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listener = listenersArr[i];\n\t\tif(listener.type.includes(change.type)) {\n\t\t\tif(listener.once === true) {\n\t\t\t\tlistenersArr.splice(i, 1);\n\t\t\t}\n\t\t\tlistener.func.call(thisValue, change);\n\t\t}\n\t}\n}\n\n/**\n * process special event for a built-in method and then bubble up the data tree\n * @param dataNode\n * @param funcName - the method's name\n * @param funcArgs - the method's arguments\n * @param oldValue\n * @param value\n */\nexport function initFunctionEmitEvent(\n\tdataNode: DataNode,\n\tfuncName: eventNames,\n\tfuncArgs: ChangeEvent['args'],\n\toldValue: any,\n\tvalue: any,\n) {\n\tlet change: ChangeEvent = {\n\t\tpath: '', value, oldValue, type: funcName, args: funcArgs,\n\t};\n\n\tbubbleEmit(dataNode, change);\n\n\tif(dataNode[ND].deferredEvents) {\n\t\t// manually handle the side-effect events that were caught\n\t\t// in order to not bubble up, but should capture down\n\t\tfor(let event of dataNode[ND].deferredEvents!) {\n\t\t\tif(event.change.path === '') {\n\t\t\t\t// no path means its an event directly on the property, not on the parent.\n\t\t\t\t// i.e: not an event with path \"0\" on \".arr\", but an event with no path on \".arr[0]\".\n\t\t\t\t// function event on \"arr\" already ran, but now a regular event on \"arr[0]\" is due\n\t\t\t\tlet thisValue = getProxyValue(event.dataNode);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.shallow, thisValue, event.change);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.deep, thisValue, event.change);\n\t\t\t}\n\n\t\t\tif(event.shouldCapture) {\n\t\t\t\tcaptureEmit(event.dataNode, event.change);\n\t\t\t}\n\t\t}\n\t\tdelete dataNode[ND].deferredEvents;\n\t}\n\telse {\n\t\tconsole.warn(`no side effect events for ${funcName} were made`);\n\t}\n}","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Proxy methods are methods that will proxy JS built-in methods.\n// For examply, the proxy function for \"splice\" will handle some event stuff and then use\n// the actual \"splice\" function internally\n\"use strict\"\n\nimport { nodeStatuses, eventNamesObject, ND, NID } from './globals';\nimport { DataNode, ProxyNode } from './types';\nimport { initFunctionEmitEvent } from './event-emitter';\n\n/**\n * a wrapper function for the 'splice' method\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * \n * @param start \n * @param deleteCount \n * @param items - rest of arguments\n */\nexport function splice(\n\tdataNode: DataNode,\n\tproxyNode: ProxyNode,\n\tstart: number,\n\tdeleteCount: number,\n\t...items: any[]\n): any[] {\n\tif(dataNode[NID].status !== nodeStatuses.ACTIVE) {\n\t\treturn Array.prototype.splice.call(proxyNode[ND].proxy, start, deleteCount, ...items);\n\t}\n\n\tlet isActiveByInheritance = !dataNode[NID].hasOwnProperty('status');\n\tdataNode[NID].status = nodeStatuses.SPLICING;\n\tlet oldValue = proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.splice.call(proxyNode[ND].proxy, start, deleteCount, ...items); // creates many side-effect events\n\tlet args = { start, deleteCount, items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete dataNode[NID].status;\n\t} else {\n\t\tdataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\n\tinitFunctionEmitEvent(dataNode, eventNamesObject.splice, args, oldValue, proxyNode[ND].target);\n\n\treturn deleted;\n}\n\n/**\n * a wrapper function for the 'shift' method\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n */\nexport function shift(dataNode: DataNode, proxyNode: ProxyNode): any {\n\tif(dataNode[NID].status !== nodeStatuses.ACTIVE) {\n\t\t// if not active then run regular `shift`\n\t\t// which will reach the `set` of the ProxyHandler and will be blocked or events stopped, etc.\n\t\treturn Array.prototype.shift.call(proxyNode[ND].proxy);\n\t}\n\n\tlet isActiveByInheritance = !dataNode[NID].hasOwnProperty('status');\n\tdataNode[NID].status = nodeStatuses.SPLICING;\n\tlet oldValue = proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.shift.call(proxyNode[ND].proxy); // creates many side-effect events\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete dataNode[NID].status;\n\t} else {\n\t\tdataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\n\tinitFunctionEmitEvent(dataNode, eventNamesObject.shift, {}, oldValue, proxyNode[ND].target);\n\n\treturn deleted;\n}\n\n/**\n * a wrapper function for the 'unshift' method\n * \n * @remarks\n * automatically filled param {Object} dataNode\n * automatically filled param {Object} proxyNode\n * \n * @param items \n */\nexport function unshift(dataNode: DataNode, proxyNode: ProxyNode, ...items: any[]): number {\n\tif(dataNode[NID].status !== nodeStatuses.ACTIVE) {\n\t\treturn Array.prototype.shift.call(proxyNode[ND].proxy) as number;\n\t}\n\n\tlet isActiveByInheritance = !dataNode[NID].hasOwnProperty('status');\n\tdataNode[NID].status = nodeStatuses.SPLICING;\n\tlet oldValue = proxyNode[ND].target.slice(0);\n\tlet newLength: number = Array.prototype.unshift.call(proxyNode[ND].proxy, ...items); // creates many side-effect events\n\tlet args = { items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete dataNode[NID].status;\n\t} else {\n\t\tdataNode[NID].status = nodeStatuses.ACTIVE;\n\t}\n\n\tinitFunctionEmitEvent(dataNode, eventNamesObject.unshift, args, oldValue, proxyNode[ND].target);\n\n\treturn newLength;\n}\n","/**\n * Copyright 2021 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, nodeStatuses, proxyStatuses, ND, NID } from './globals';\nimport { ProxserveInstance, DataNode, ProxyNode, TargetVariable, SomeObject, ProxserveInstanceMetadata } from './types';\nimport { unproxify, createNodes } from './supporting-functions';\nimport * as pseudoMethods from './pseudo-methods';\nimport * as proxyMethods from './proxy-methods';\nimport { realtypeof, splitPath, evalPath } from './general-functions';\nimport { initEmitEvent } from './event-emitter';\n\n/**\n * save an array of all reserved function names\n * and also add synonyms to these functions\n */\nlet pseudoMethodsNames = Object.keys(pseudoMethods);\nfor(let i = pseudoMethodsNames.length - 1; i >= 0; i--) {\n\tlet name = pseudoMethodsNames[i];\n\tlet synonym = '$'+name;\n\tpseudoMethods[synonym] = pseudoMethods[name];\n\tpseudoMethodsNames.push(synonym);\n}\n\ninterface MakeOptions {\n\t/**\n\t * should destroy detached child-objects or deleted properties automatically\n\t */\n\tstrict?: boolean;\n\t/**\n\t * should splice, shift or unshift emit one event or all internal CRUD events\n\t */\n\temitMethods?: boolean;\n\tdebug?: {\n\t\t/**\n\t\t * delay before destroying a detached child-object\n\t\t */\n\t\tdestroyDelay: number;\n\t};\n}\n\nexport class Proxserve {\n\t/**\n\t * make a new proxserve instance\n\t */\n\tstatic make(target: TargetVariable, options = {} as MakeOptions): ProxserveInstance {\n\t\tconst {\n\t\t\tstrict = true,\n\t\t\temitMethods = true,\n\t\t\tdebug = { destroyDelay: 1000 },\n\t\t} = options;\n\n\t\tlet dataTreePrototype: DataNode = {\n\t\t\t[NID]: { status: nodeStatuses.ACTIVE },\n\t\t\t[ND]: { isTreePrototype: true } as DataNode[typeof ND],\n\t\t};\n\t\tlet proxyTreePrototype: ProxyNode = {\n\t\t\t[NID]: { status: proxyStatuses.ALIVE },\n\t\t\t[ND]: { isTreePrototype: true } as ProxyNode[typeof ND],\n\t\t};\n\n\t\tconst newNodes = createNodes(dataTreePrototype, '', proxyTreePrototype, target);\n\n\t\tconst metadata = {\n\t\t\tstrict,\n\t\t\temitMethods,\n\t\t\tdestroyDelay: debug.destroyDelay,\n\t\t\tdataTree: newNodes.dataNode,\n\t\t\tproxyTree: newNodes.proxyNode,\n\t\t} as ProxserveInstanceMetadata;\n\n\t\treturn Proxserve.createProxy(metadata, metadata.dataTree);\n\t}\n\n\t/**\n\t * create a new proxy and a new node for a property of the parent's target-object\n\t */\n\tstatic createProxy(metadata: ProxserveInstanceMetadata, parentDataNode: DataNode, targetProperty?: string): ProxserveInstance {\n\t\tlet parentProxyNode = parentDataNode[ND].proxyNode\n\t\tlet dataNode: DataNode, proxyNode: ProxyNode;\n\n\t\tif(targetProperty === undefined) { //refering to own node and not a child property (meaning root object)\n\t\t\tdataNode = parentDataNode;\n\t\t\tproxyNode = parentProxyNode;\n\t\t}\n\t\telse {\n\t\t\t//creates new or reset an existing data-node and then creates a new proxy-node\n\t\t\tconst newNodes = createNodes(\n\t\t\t\tparentDataNode,\n\t\t\t\ttargetProperty,\n\t\t\t\tparentProxyNode,\n\t\t\t\tparentProxyNode[ND].target[targetProperty],\n\t\t\t);\n\t\t\tdataNode = newNodes.dataNode;\n\t\t\tproxyNode = newNodes.proxyNode;\n\t\t}\n\n\t\tlet target = proxyNode[ND].target;\n\n\t\tlet typeoftarget = realtypeof(target);\n\n\t\tif(proxyTypes[typeoftarget]) {\n\t\t\tlet revocable = Proxy.revocable<TargetVariable>(target, {\n\t\t\t\tget: (target: TargetVariable/*same as parent scope 'target'*/, property: string|symbol, proxy) => {\n\t\t\t\t\tif(metadata.emitMethods && Object.prototype.hasOwnProperty.call(proxyMethods, property) && property in Object.getPrototypeOf(target)) {\n\t\t\t\t\t\t// use a proxy method instead of the built-in method that is on the prototype chain\n\t\t\t\t\t\treturn proxyMethods[property].bind({ metadata, dataNode, proxyNode });\n\t\t\t\t\t}\n\t\t\t\t\telse if(pseudoMethodsNames.includes(property as string) && typeof target[property] === 'undefined') {\n\t\t\t\t\t\t// can access a pseudo function (or its synonym) if their keywords isn't used\n\t\t\t\t\t\treturn pseudoMethods[property].bind({ metadata, dataNode, proxyNode });\n\t\t\t\t\t}\n\t\t\t\t\telse if(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\treturn target[property]; // non-enumerable or non-path'able aren't proxied\n\t\t\t\t\t}\n\t\t\t\t\telse if(proxyNode[property] // there's a child node\n\t\t\t\t\t\t\t&& proxyNode[property][ND].proxy // it holds a proxy\n\t\t\t\t\t\t\t&& proxyNode[property][NID].status === proxyStatuses.ALIVE) {\n\t\t\t\t\t\treturn proxyNode[property][ND].proxy;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn target[property];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\n\t\t\t\tset: (target/*same as parent scope 'target'*/, property, value, proxy) => { //'receiver' is proxy\n\t\t\t\t\t/**\n\t\t\t\t\t * property can be a regular object because of 3 possible reasons:\n\t\t\t\t\t * 1. proxy is deleted from tree but user keeps accessing it then it means he saved a reference\n\t\t\t\t\t * 2. it is a non-enumerable property which means it was intentionally hidden\n\t\t\t\t\t * 3. property is a symbol and symbols can't be proxied because we can't create a normal path for them.\n\t\t\t\t\t *    these properties are not proxied and should not emit change-event.\n\t\t\t\t\t *    except for: length\n\t\t\t\t\t * TODO - make a list of all possible properties exceptions (maybe function 'name'?)\n\t\t\t\t\t */\n\t\t\t\t\tif(dataNode[NID].status === nodeStatuses.BLOCKED) { //blocked from changing values\n\t\t\t\t\t\tconsole.error('object is blocked. can\\'t change value of property:', property);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(typeof property === 'symbol') {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(property !== 'length' && !target.propertyIsEnumerable(property)) {\n\t\t\t\t\t\t//if setting a whole new property then it is non-enumerable (yet) so a further test is needed\n\t\t\t\t\t\tlet descriptor = Object.getOwnPropertyDescriptor(target, property);\n\t\t\t\t\t\tif(typeof descriptor === 'object' && descriptor.enumerable === false) { //property was previously set\n\t\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; // should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t// about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = proxyStatuses.DELETED;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; // detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t// postpone this cpu intense function for later, probably when proxserve is not in use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = unproxify(value);\n\t\t\t\t\ttarget[property] = value; //assign new value\n\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\tlet typeofvalue = realtypeof(value);\n\t\t\t\t\tif(proxyTypes[typeofvalue]) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, property); // if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * TODO - this function is incomplete and doesn't handle all of 'descriptor' scenarios\n\t\t\t\t */\n\t\t\t\tdefineProperty: (target/*same as parent scope 'target'*/, property, descriptor) => {\n\t\t\t\t\tif(typeof property === 'symbol') {\n\t\t\t\t\t\tObject.defineProperty(target, property, descriptor);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = proxyStatuses.DELETED;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdescriptor.value = unproxify(descriptor.value);\n\t\t\t\t\tObject.defineProperty(target, property, descriptor); //defining the new value\n\t\t\t\t\tlet value = descriptor.value;\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\t//excluding non-enumerable properties from being proxied\n\t\t\t\t\tlet typeofvalue = realtypeof(descriptor.value);\n\t\t\t\t\tif(proxyTypes[typeofvalue] && descriptor.enumerable === true) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, property); //if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\tdeleteProperty: (target/*same as parent scope 'target'*/, property) => {\n\t\t\t\t\tif(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\t//non-proxied properties simply get deleted and nothing more\n\t\t\t\t\t\tdelete target[property];\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(dataNode[NID].status === nodeStatuses.BLOCKED) { //blocked from changing values\n\t\t\t\t\t\tconsole.error(`can't delete property '${property}'. object is blocked.`);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(property in target) {\n\t\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\t\tproxyNode[property][NID].status = proxyStatuses.DELETED;\n\t\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete target[property]; // actual delete\n\n\t\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, undefined, false);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn true; //do nothing because there's nothing to delete\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as ProxyHandler<TargetVariable>) as { proxy: ProxserveInstance, revoke: ()=>void };\n\n\t\t\tproxyNode[ND].proxy = revocable.proxy;\n\t\t\tproxyNode[ND].revoke = revocable.revoke;\n\n\t\t\tif(proxyTypes[typeoftarget]) {\n\t\t\t\tlet keys = Object.keys(target); //handles both Objects and Arrays\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\tlet typeofproperty = realtypeof(target[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, key); //recursively make child objects also proxies\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.warn(`Type of \"${typeoftarget}\" is not implemented`);\n\t\t\t}\n\n\t\t\treturn revocable.proxy;\n\t\t}\n\t\telse {\n\t\t\tconst types = Object.keys(proxyTypes);\n\t\t\tthrow new Error(`Must observe an ${types.join('/')}`);\n\t\t}\n\t}\n\n\t/**\n\t * Recursively revoke proxies, allowing them to be garbage collected.\n\t * this functions delays 1000 milliseconds to let time for all events to finish\n\t */\n\tstatic destroy(proxy: ProxserveInstance) {\n\t\tlet proxyNode;\n\t\ttry {\n\t\t\tconst nodes = proxy.$getProxserveNodes();\n\t\t\tproxyNode = nodes.proxyNode;\n\t\t} catch(error) {\n\t\t\treturn; // proxy variable isn't a proxy\n\t\t}\n\n\t\tif(proxyNode[NID].status === proxyStatuses.ALIVE) {\n\t\t\tproxyNode[NID].status = proxyStatuses.DELETED;\n\t\t}\n\n\t\tlet typeofproxy = realtypeof(proxy);\n\n\t\tif(proxyTypes[typeofproxy]) {\n\t\t\tlet keys = Object.keys(proxy); // handles both Objects and Arrays\n\t\t\tfor(let key of keys) {\n\t\t\t\ttry {\n\t\t\t\t\tlet typeofproperty = realtypeof(proxy[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\t// going to proxy[key], which is deleted, will return the original target so we will bypass it\n\t\t\t\t\t\tProxserve.destroy(proxyNode[key][ND].proxy);\n\t\t\t\t\t}\n\t\t\t\t} catch(error) {\n\t\t\t\t\tconsole.error(error); // don't throw and kill the whole process just if this iteration fails\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproxyNode[ND].revoke();\n\t\t\t//proxyNode[ND].proxy = undefined;\n\t\t\tproxyNode[NID].status = proxyStatuses.REVOKED;\n\t\t}\n\t\telse {\n\t\t\tconsole.warn(`Type of \"${typeofproxy}\" is not implemented`);\n\t\t}\n\t}\n\n\t/**\n\t * splits a path to an array of properties\n\t */\n\tstatic splitPath(path: string): Array<string|number> {\n\t\treturn splitPath(path);\n\t}\n\n\t/**\n\t * evaluate a long path and return the designated object and its referred property\n\t */\n\tstatic evalPath(obj: SomeObject, path: string): {\n\t\tobject: SomeObject,\n\t\tproperty: string|number,\n\t\tvalue: any,\n\t} {\n\t\treturn evalPath(obj, path);\n\t}\n}"],"names":["$66763b9de58a4cbb$export$f7e0aa381a5261fc","Symbol","for","$66763b9de58a4cbb$export$d1c20e4ad7d32581","$66763b9de58a4cbb$export$94b8be4ec3303efd","Object","Array","nodeStatuses","proxyStatuses","eventNamesObject","$fda00bc7ddcd3bc7$export$99a2acdf670c1bf4","variable","rawType","prototype","toString","call","substring","length","$66763b9de58a4cbb$export$eb0c55c6f2ee7170","$66763b9de58a4cbb$export$89e04a1d3d3065f6","$66763b9de58a4cbb$export$6b3dabbc9fa607b7","WeakSet","$fda00bc7ddcd3bc7$export$824c337f43f2b64d","path","i","betweenBrackets","onlyDigits","resultsArr","tmp","char","push","parseInt","code","charCodeAt","$a72f28e28e24748b$export$1b787634d8e3bf02","obj","property","Error","typeofobj","console","warn","$a72f28e28e24748b$export$a58c3ed528c9c399","value","typeofvalue","target","$getOriginalTarget","error","keys","key","$a72f28e28e24748b$export$953dd193a01bd6ec","parentDataNode","parentProxyNode","propertyPath","proxyNode","dataNode","create","parentNode","listeners","shallow","deep","status","isTreePrototype","assign","undefined","$cb4cc1e2f387f5a6$export$fa6813432f753b0d","this","STOPPED","$cb4cc1e2f387f5a6$export$837bd02682cd3db9","BLOCKED","$cb4cc1e2f387f5a6$export$234c45b355edd85b","force","metadata","dataTree","ACTIVE","$cb4cc1e2f387f5a6$export$af631764ddc44097","args","listener","options","events","_deep","_once","once","isArray","event","names","join","segments","listenersPool","listenerObj","type","func","id","$cb4cc1e2f387f5a6$export$d2de3aaeafa91619","$cb4cc1e2f387f5a6$var$removeById","listenersArr","splice","$cb4cc1e2f387f5a6$export$b03e9483f936dccb","fullPath","$cb4cc1e2f387f5a6$export$6f2e3a6079f109b1","$cb4cc1e2f387f5a6$export$35f261dd63190ac1","$cb4cc1e2f387f5a6$export$c3c6db5039118967","$08aa8f4cfdbb0713$var$getProxyValue","ALIVE","proxy","ref","$08aa8f4cfdbb0713$export$febbc75e71f4ca1b","oldValue","wasOldValueProxy","isValueProxy","deferredEvents","changeType","update","delete","SPLICING","change","shouldCapture","$08aa8f4cfdbb0713$var$bubbleEmit","$08aa8f4cfdbb0713$var$captureEmit","thisValue","$08aa8f4cfdbb0713$var$iterateAndEmit","nextChange","subValue","subOldValue","subChange","childNode","includes","$08aa8f4cfdbb0713$export$29f2d3a310653bb4","funcName","funcArgs","$f5798ab020ffb663$export$869882364835d202","start","deleteCount","items","isActiveByInheritance","hasOwnProperty","slice","deleted","$f5798ab020ffb663$export$fba63a578e423eb","shift","$f5798ab020ffb663$export$37cdb546b806ae87","newLength","unshift","$f3a59425b0ffb76f$var$pseudoMethodsNames","$cb4cc1e2f387f5a6$exports","name","synonym","$f3a59425b0ffb76f$export$d402cf8388053971","static","target2","strict","emitMethods","debug","destroyDelay","newNodes","proxyTree","createProxy","targetProperty","target1","typeoftarget","revocable","Proxy","get","$f5798ab020ffb663$exports","getPrototypeOf","bind","propertyIsEnumerable","set","descriptor","getOwnPropertyDescriptor","enumerable","isOldValueProxy","DELETED","setTimeout","destroy","defineProperty","deleteProperty","revoke","typeofproperty","types","$getProxserveNodes","typeofproxy","REVOKED","path1","object","$fda00bc7ddcd3bc7$export$8ffa680996c65fde"],"version":3,"file":"index.min.js.map"}