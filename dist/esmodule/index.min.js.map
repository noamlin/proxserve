{"mappings":"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","sources":["src/globals.ts","src/general-functions.ts","src/supporting-functions.ts","src/pseudo-methods.ts","src/event-emitter.ts","src/proxy-methods.ts","src/index.ts"],"sourcesContent":["/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nexport const ND = Symbol.for('proxserve_node_data'); // key for the data of a node\nexport const NID = Symbol.for('proxserve_node_inherited_data'); // key for the inherited data of a node\n\n// acceptable types to be proxied\nexport const proxyTypes = {\n\t\"Object\": true,\n\t\"Array\": true,\n};\n\n// statuses of data-nodes\nexport enum NODE_STATUSES {\n\tactive = 'active',\n\tstopped = 'stopped',\n\tblocked = 'blocked',\n\tsplicing = 'splicing',\n};\n\n// statuses of proxies\nexport enum PROXY_STATUSES {\n\talive = 'alive',\n\tdeleted = 'deleted',\n\trevoked = 'revoked',\n};\n\n// event names that can be emitted\nexport enum EVENTS {\n\tcreate = 'create',\n\tupdate = 'update',\n\tdelete = 'delete',\n\tsplice = 'splice',\n\tshift = 'shift',\n\tunshift = 'unshift',\n};","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { SomeObject, SomeArray, VariableTypes } from './types/globals';\n\n/**\n * return a string representing the full type of the variable\n */\nexport function realtypeof(variable: any): VariableTypes {\n\tlet rawType = Object.prototype.toString.call(variable); //[object Object], [object Array], [object Number]...\n\treturn rawType.substring(8, rawType.length - 1) as VariableTypes;\n}\n\n/**\n * check if variable is a number or a string of a number\n * @param variable \n */\n/*export function isNumeric(variable: any): boolean {\n\tif(typeof variable === 'string' && variable === '') {\n\t\treturn false;\n\t}\n\t\n\treturn !isNaN(variable as number);\n}*/\n\n/**\n * recursively clones objects and array\n */\nconst simpleCloneSet = new WeakSet();\nexport function simpleClone(variable: any): any {\n\tlet typeofvar = realtypeof(variable);\n\n\tif(typeofvar === 'Object') {\n\t\tconst obj = variable as SomeObject;\n\t\tsimpleCloneSet.add(obj);\n\t\tconst cloned = {};\n\t\tlet keys = Object.keys(obj);\n\t\tfor(let key of keys) {\n\t\t\tif(simpleCloneSet.has(obj[key])) {\n\t\t\t\tcloned[key] = obj[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[key] = simpleClone(obj[key]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse if(typeofvar === 'Array') {\n\t\tconst arr = variable as SomeArray;\n\t\tsimpleCloneSet.add(arr);\n\t\tconst cloned = [] as any[];\n\t\tfor(let i = 0; i < arr.length; i++) {\n\t\t\tif(simpleCloneSet.has(arr[i])) {\n\t\t\t\tcloned[i] = arr[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[i] = simpleClone(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse { // hopefully a primitive\n\t\tif(typeofvar !== 'Undefined' && typeofvar !== 'Null' && typeofvar !== 'Boolean' && typeofvar !== 'Number'\n\t\t&& typeofvar !== 'BigInt' && typeofvar !== 'String') {\n\t\t\tconsole.warn(`Can't clone a variable of type ${typeofvar}`);\n\t\t}\n\t\treturn variable;\n\t}\n}\n\n/**\n * splits a path to an array of properties\n * (benchmarked and is faster than regex and split())\n * @param path \n */\nexport function splitPath(path: string): Array<string|number> {\n\tif(typeof path !== 'string' || path === '') {\n\t\treturn [];\n\t}\n\t\n\tlet i = 0, betweenBrackets = false, onlyDigits = false;\n\t//loop will skip over openning '.' or '['\n\tif(path[0] === '.') {\n\t\ti = 1;\n\t} else if(path[0] === '[') {\n\t\ti = 1;\n\t\tbetweenBrackets = true;\n\t\tonlyDigits = true;\n\t}\n\n\tlet resultsArr = [] as Array<string|number>;\n\tlet tmp = '';\n\tfor(; i < path.length; i++) {\n\t\tlet char = path[i];\n\n\t\tif(betweenBrackets) {\n\t\t\tif(char === ']') {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tresultsArr.push(parseInt(tmp, 10));\n\t\t\t\t} else {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t}\n\n\t\t\t\tbetweenBrackets = false;\n\t\t\t\tonlyDigits = false;\n\t\t\t\ttmp = '';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tlet code = char.charCodeAt(0);\n\t\t\t\t\tif(code < 48 || code > 57) { //less than '0' char or greater than '9' char\n\t\t\t\t\t\tonlyDigits = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(char === '[') {\n\t\t\t\tbetweenBrackets = true;\n\t\t\t\tonlyDigits = true;\n\t\t\t}\n\t\t\t\n\t\t\t//check if starting a new property but avoid special case of [prop][prop]\n\t\t\tif(char === '.' || char === '[') {\n\t\t\t\tif(tmp !== '') {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t\ttmp = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t}\n\tif(tmp !== '') {\n\t\tresultsArr.push(tmp);\n\t}\n\treturn resultsArr;\n}\n\n/**\n * evaluate a long path and return the designated object and its referred property\n */\nexport function evalPath(obj: SomeObject, path: string): {\n\tobject: SomeObject,\n\tproperty: string | number,\n\tvalue: any,\n} {\n\tif(path === '') {\n\t\treturn {\n\t\t\tobject: obj,\n\t\t\tproperty: '',\n\t\t\tvalue: obj,\n\t\t};\n\t}\n\n\tlet segments = splitPath(path);\n\tlet i: number;\n\tfor(i = 0; i <= segments.length - 2; i++) { // iterate until one before last property because they all must exist\n\t\tobj = obj[segments[i]];\n\t\tif(typeof obj === 'undefined') {\n\t\t\tthrow new Error(`Invalid path was given - \"${path}\"`);\n\t\t}\n\t}\n\treturn {\n\t\tobject: obj,\n\t\tproperty: segments[i],\n\t\tvalue: obj[ segments[i] ],\n\t};\n}","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, ND, NID } from './globals';\nimport { TargetVariable, ListenerData } from './types/globals';\nimport { DataNode, ProxyNode } from './types/proxserve-class';\nimport { realtypeof } from './general-functions';\n\n/**\n * Convert property name to valid path segment\n */\nexport function property2path(obj: any, property: string|number): string {\n\tif(typeof property === 'symbol') {\n\t\tthrow new Error(`property of type \"symbol\" isn't path'able`);\n\t}\n\n\tconst typeofobj = realtypeof(obj);\n\tswitch(typeofobj) {\n\t\tcase 'Object': {\n\t\t\treturn `.${property}`;\n\t\t}\n\t\tcase 'Array': {\n\t\t\treturn `[${property}]`;\n\t\t}\n\t\tdefault: {\n\t\t\tconsole.warn(`Not Implemented (type of '${typeofobj}')`);\n\t\t\treturn property as string;\n\t\t}\n\t}\n}\n\n/**\n * recursively switch between all proxies to their original targets.\n * note: original targets should never hold proxies under them,\n * thus altering the object references (getting from 'value') should be ok.\n * if whoever uses this library decides to\n * \t1. create a proxy with children (sub-proxies)\n * \t2. create a regular object\n * \t3. adding sub-proxies to the regular object\n * \t4. attaching the regular object to the proxy\n * then this regular object will be altered.\n */\nexport function unproxify(value: any): any {\n\tconst typeofvalue = realtypeof(value);\n\n\tif(proxyTypes[typeofvalue]) {\n\t\tlet target = value;\n\t\ttry {\n\t\t\ttarget = value.$getOriginalTarget();\n\t\t} catch(error) {}\n\n\t\tswitch(typeofvalue) {\n\t\t\tcase 'Object':\n\t\t\t\tlet keys = Object.keys(target);\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\ttarget[key] = unproxify(target[key]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Array':\n\t\t\t\tfor(let i=0; i < target.length; i++) {\n\t\t\t\t\ttarget[i] = unproxify(target[i]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Not Implemented (type of '${typeofvalue}')`);\n\t\t}\n\n\t\treturn target;\n\t}\n\telse {\n\t\treturn value; // primitive\n\t}\n}\n\n/**\n * create or reset a node in a tree of meta-data (mainly path related)\n * and optionally create a node in a tree of proxy data (mainly objects related)\n */\nexport function createNodes(\n\tparentDataNode: DataNode,\n\tproperty: string | number,\n\tparentProxyNode?: ProxyNode,\n\ttarget?: TargetVariable,\n): { dataNode: DataNode, proxyNode: ProxyNode | undefined } {\n\t//handle property path\n\tlet propertyPath: string;\n\tif(parentProxyNode?.[ND].target) {\n\t\tpropertyPath = property2path(parentProxyNode[ND].target, property);\n\t} else {\n\t\tpropertyPath = property2path({}, property); // if parent doesn't have target then treat it as object\n\t}\n\t\n\t//handle data node\n\tlet dataNode: DataNode = parentDataNode[property]; // try to receive existing data-node\n\tif(!dataNode) {\n\t\tdataNode = {\n\t\t\t[NID]: Object.create(parentDataNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\tparentNode: parentDataNode,\n\t\t\t\tlisteners: {\n\t\t\t\t\tshallow: [] as ListenerData[],\n\t\t\t\t\tdeep: [] as ListenerData[],\n\t\t\t\t},\n\t\t\t}\n\t\t} as DataNode;\n\t\tparentDataNode[property] = dataNode;\n\t}\n\n\tdelete dataNode[NID].status; // clears old status in case a node previously existed\n\t// updates path (for rare case where parent was array and then changed to object or vice versa)\n\tif(!parentDataNode[ND].isTreePrototype) {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: parentDataNode[ND].path + propertyPath,\n\t\t\tpropertyPath\n\t\t});\n\t}\n\telse {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: '',\n\t\t\tpropertyPath: ''\n\t\t});\n\t}\n\n\t// handle proxy node\n\tlet proxyNode: ProxyNode | undefined;\n\tif(parentProxyNode) {\n\t\tproxyNode = {\n\t\t\t[NID]: Object.create(parentProxyNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\ttarget: target as TargetVariable,\n\t\t\t\tdataNode,\n\t\t\t},\n\t\t};\n\n\t\tparentProxyNode[property] = proxyNode;\n\n\t\t// attach nodes to each other\n\t\tdataNode[ND].proxyNode = proxyNode;\n\t} else {\n\t\t// this scenario is dangerous and exists only for `on()` of future variables (paths) that don't yet exist\n\t\tproxyNode = undefined;\n\t}\n\n\treturn { dataNode, proxyNode };\n}\n","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Pseudo methods are methods that aren't really on the object - not as a property nor via its prototype\n// thus they will not be retrieved via \"for..in\" and etcetera. Their property name is actually undefined, but\n// calling it will return the method via the JS proxy's \"get\" handler.\n// (i.e. someProxserve.pseudoFunction will return the pseudoFunction)\n\"use strict\"\n\nimport { EVENTS, NODE_STATUSES, ND, NID } from './globals';\nimport { ListenerData, EVENT_NAMES } from './types/globals';\nimport {\n\tStopFunction, BlockFunction, ActivateFunction,\n\tOnFunction, OnceFunction,\n\tRemoveListenerFunction, RemoveAllListenersFunction,\n\tGetProxserveNameFunction, WhoAMI,\n\tGetOriginalTargetFunction, GetProxserveNodesFunction,\n} from './types/pseudo-methods';\nimport { createNodes } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\nexport const stop: StopFunction = function stop(this) {\n\tthis.dataNode[NID].status = NODE_STATUSES.stopped;\n};\n\nexport const block: BlockFunction = function block(this) {\n\tthis.dataNode[NID].status = NODE_STATUSES.blocked;\n};\n\nexport const activate: ActivateFunction = function activate(this, force = false): void {\n\tif(force || this.dataNode === this.metadata.dataTree) { // force activation or we are on root proxy\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\telse {\n\t\tdelete this.dataNode[NID].status;\n\t}\n};\n\nexport const on: OnFunction = function on(this, args) {\n\tconst {\n\t\tpath = '',\n\t\tlistener,\n\t\tid,\n\t\tdeep = false,\n\t\tonce = false,\n\t} = args;\n\t// its nicer to expose `event` to the user,\n\t// but since it is semi-reserved word, we internally rename it to `events`\n\tlet { event: events } = args;\n\n\tif(events === 'change') {\n\t\tevents = Object.keys(EVENTS) as EVENT_NAMES[]; // will listen to all events\n\t} else if(!Array.isArray(events)) {\n\t\tevents = [events];\n\t}\n\n\tfor(let event of events) {\n\t\tif(!EVENTS[event]) {\n\t\t\tconst names = Object.keys(EVENTS);\n\t\t\tthrow new Error(`${event} is not a valid event. valid events are ${names.join(',')}`);\n\t\t}\n\t}\n\t\n\tlet dataNode = this.dataNode;\n\tlet segments = splitPath(path);\n\tfor(let property of segments) { // traverse down the tree\n\t\tif(!dataNode[property]) {\n\t\t\t// create data-nodes if needed (in dataNode[property]), but don't create/overwrite proxy-nodes\n\t\t\tcreateNodes(dataNode, property);\n\t\t}\n\n\t\tdataNode = dataNode[property];\n\t}\n\n\tlet listenersPool = dataNode[ND].listeners.shallow;\n\tif(deep) {\n\t\tlistenersPool = dataNode[ND].listeners.deep;\n\t}\n\n\tlet listenerObj = {\n\t\ttype: events,\n\t\tonce,\n\t\tfunc: listener\n\t} as ListenerData;\n\n\tif(id !== undefined) {\n\t\tlistenerObj.id = id;\n\t}\n\tlistenersPool.push(listenerObj);\n};\n\nexport const once: OnceFunction = function once(this, args) {\n\targs.once = true;\n\ton.call(this, args);\n};\n\nfunction removeById(listenersArr: ListenerData[], id: string | number | Function): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listenerObj = listenersArr[i];\n\t\tif((id !== undefined && listenerObj.id === id) || listenerObj.func === id) {\n\t\t\tlistenersArr.splice(i, 1);\n\t\t}\n\t}\n}\n\nexport const removeListener: RemoveListenerFunction = function removeListener(this, args) {\n\tconst { id, path = '' } = args;\n\tconst fullPath = `${this.dataNode[ND].path}${path}`;\n\tlet dataNode = this.dataNode;\n\tconst segments = splitPath(path);\n\n\t// traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove listener from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tremoveById(dataNode[ND].listeners.shallow, id);\n\tremoveById(dataNode[ND].listeners.deep, id);\n};\n\nexport const removeAllListeners: RemoveAllListenersFunction = function removeAllListeners(this, path = '') {\n\tconst fullPath = `${this.dataNode[ND].path}${path}`;\n\tconst segments = splitPath(path);\n\tlet dataNode = this.dataNode;\n\n\t//traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove all listeners from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tdataNode[ND].listeners.shallow = [] as ListenerData[];\n\tdataNode[ND].listeners.deep = [] as ListenerData[];\n};\n\nexport const getOriginalTarget: GetOriginalTargetFunction = function getOriginalTarget(this) {\n\treturn this.proxyNode[ND].target;\n};\n\nexport const getProxserveName: GetProxserveNameFunction = function getProxserveName(this) {\n\treturn this.dataNode[NID].name;\n};\n\nexport const whoami: WhoAMI = function whoami(this) {\n\treturn this.dataNode[NID].name + this.dataNode[ND].path;\n};\n\nexport const getProxserveNodes: GetProxserveNodesFunction = function getProxserveNodes(this) {\n\treturn { dataNode: this.dataNode, proxyNode: this.proxyNode };\n};","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { EVENTS, NODE_STATUSES, PROXY_STATUSES, ND, NID } from './globals';\nimport type { EVENT_NAMES, ChangeEvent, DeferredEvent, ListenerData } from './types/globals';\nimport type { DataNode } from './types/proxserve-class';\nimport { property2path } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\n/**\n * try to get the proxy-object from a data-node. if can't then from it's parent's proxy\n * @param dataNode \n * @param [property] - the property as the dataNode is assigned on its parent\n */\nfunction getProxyValue(dataNode: DataNode, property?: string): any {\n\tif(dataNode[ND].proxyNode && dataNode[ND].proxyNode[NID].status === PROXY_STATUSES.alive) {\n\t\treturn dataNode[ND].proxyNode[ND].proxy; // actual proxy of child node\n\t}\n\telse {\n\t\tif(!property) {\n\t\t\t// my property on the parent\n\t\t\tproperty = splitPath(dataNode[ND].propertyPath)[0] as string;\n\t\t}\n\n\t\tlet parentNode = dataNode[ND].parentNode;\n\n\t\tif(parentNode[ND].proxyNode && parentNode[ND].proxyNode[NID].status === PROXY_STATUSES.alive) {\n\t\t\treturn parentNode[ND].proxyNode[ND].proxy?.[property]; // proxy or primitive via parent's proxy object\n\t\t}\n\t\telse {\n\t\t\t// if we reached here then probably we are on a capture phase of a deep deletion.\n\t\t\t// for example 'obj.sub1.sub2' gets 'delete obj.sub1' so now there are no values for 'sub2' nor its parent 'sub1'.\n\t\t\t// the warning is turned off because this situation seems okay\n\t\t\t// console.warn(`reached a capture level where neither child not parent proxy-nodes exist`);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n/**\n * process event and then bubble up and capture down the data tree\n * @param dataNode\n * @param property\n * @param oldValue\n * @param wasOldValueProxy\n * @param value\n * @param isValueProxy\n */\nexport function initEmitEvent(\n\tdataNode: DataNode,\n\tproperty: string,\n\toldValue: any,\n\twasOldValueProxy: boolean,\n\tvalue: any,\n\tisValueProxy: boolean,\n) {\n\tif(oldValue === value // no new change was made\n\t|| !dataNode[ND].proxyNode) { // proxy-node is detached from data-node\n\t\treturn;\n\t}\n\n\tlet proxyNode = dataNode[ND].proxyNode;\n\tif(proxyNode[NID].status !== PROXY_STATUSES.alive) { // altered a deleted proxy\n\t\treturn;\n\t}\n\n\tlet changeType = EVENTS.update;\n\tif(value === undefined) {\n\t\tchangeType = EVENTS.delete;\n\t} else if(oldValue === undefined) {\n\t\tchangeType = EVENTS.create;\n\t}\n\n\tlet deferredEvents: DeferredEvent[] | undefined;\n\t// altering properties of an array that's in the middle of a splicing phase\n\tif(dataNode[NID].status === NODE_STATUSES.splicing) {\n\t\t// initiate (if needed) an object to hold side effect events\n\t\tif(!dataNode[ND].deferredEvents) {\n\t\t\tdataNode[ND].deferredEvents = [];\n\t\t}\n\t\t// save a reference to the deferredEvents\n\t\tdeferredEvents = dataNode[ND].deferredEvents;\n\t}\n\n\tlet path;\n\tif(dataNode[property]) { // changed a property which has its own data node on the tree\n\t\tdataNode = dataNode[property];\n\t\tpath = '';\n\t} else {\n\t\tpath = property2path(proxyNode[ND].target, property);\n\t}\n\n\tlet change: ChangeEvent = {\n\t\tpath, value, oldValue, type: changeType,\n\t};\n\n\tif(!deferredEvents) {\n\t\tbubbleEmit(dataNode, change, property);\n\t\n\t\tif(wasOldValueProxy || isValueProxy) { // old value or new value are proxy meaning they are objects with children\n\t\t\tcaptureEmit(dataNode, change);\n\t\t}\n\t}\n\telse {\n\t\tdeferredEvents.push({dataNode, change, shouldCapture: wasOldValueProxy || isValueProxy});\n\t}\n}\n\n/**\n * bubbling phase - go up the data tree and emit\n * @param dataNode\n * @param change\n * @param property - property name of the data-node (i.e. as the data-node is assigned to its parent)\n */\nfunction bubbleEmit(dataNode: DataNode, change: ChangeEvent, property?: string): void {\n\tif(dataNode[NID].status === NODE_STATUSES.stopped) {\n\t\treturn; // not allowed to emit\n\t}\n\n\tlet thisValue = getProxyValue(dataNode, property);\n\n\tif(change.path === '') { // iterate over 'shallow' listeners\n\t\titerateAndEmit(dataNode[ND].listeners.shallow, thisValue, change);\n\t}\n\n\t// iterate over 'deep' listeners\n\titerateAndEmit(dataNode[ND].listeners.deep, thisValue, change);\n\n\tif(!dataNode[ND].parentNode[ND].isTreePrototype) { // we are not on root node yet\n\t\t// create a shallow copy of 'change' and update its path\n\t\t// (we don't want to alter the 'change' object that was just emitted to a listener)\n\t\tlet nextChange: ChangeEvent = {\n\t\t\t...change,\n\t\t\tpath: dataNode[ND].propertyPath + change.path\n\t\t};\n\n\t\tbubbleEmit(dataNode[ND].parentNode, nextChange);\n\t}\n}\n\n/**\n * capturing phase - go down the data tree and emit\n * @param dataNode\n * @param change\n */\nfunction captureEmit(dataNode: DataNode, change: ChangeEvent): void {\n\tlet keys = Object.keys(dataNode);\n\tfor(let key of keys) {\n\t\tlet subValue = (typeof change.value === 'object' && change.value !== null) ? change.value[key] : undefined;\n\t\tlet subOldValue = (typeof change.oldValue === 'object' && change.oldValue !== null) ? change.oldValue[key] : undefined;\n\t\tif(subValue !== subOldValue) { //if not both undefined or same primitive or the same object\n\t\t\tlet changeType = EVENTS.update;\n\t\t\tif(subValue === undefined) {\n\t\t\t\tchangeType = EVENTS.delete;\n\t\t\t} else if(subOldValue === undefined) {\n\t\t\t\tchangeType = EVENTS.create;\n\t\t\t}\n\n\t\t\tlet subChange: ChangeEvent = {\n\t\t\t\tpath: '',\n\t\t\t\toldValue: subOldValue,\n\t\t\t\tvalue: subValue,\n\t\t\t\ttype: changeType\n\t\t\t}\n\n\t\t\t// failing the status check will not emit for current property (but sub-properties might still be forcibly active)\n\t\t\tlet childNode = dataNode[key];\n\t\t\tif(childNode[NID].status !== NODE_STATUSES.stopped) {\n\t\t\t\tlet thisValue = getProxyValue(childNode, key);\n\t\t\t\titerateAndEmit(childNode[ND].listeners.shallow, thisValue, subChange);\n\t\t\t}\n\n\t\t\tcaptureEmit(childNode, subChange);\n\t\t}\n\t}\n}\n\n/**\n * iterate over an array of listeners, handle 'once' listeners and emit\n * @param listenersArr \n * @param thisValue \n * @param change \n */\nfunction iterateAndEmit(listenersArr: ListenerData[], thisValue: any, change: ChangeEvent): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listener = listenersArr[i];\n\t\tif(listener.type.includes(change.type)) {\n\t\t\tif(listener.once === true) {\n\t\t\t\tlistenersArr.splice(i, 1);\n\t\t\t}\n\t\t\tlistener.func.call(thisValue, change);\n\t\t}\n\t}\n}\n\n/**\n * process special event for a built-in method and then bubble up the data tree\n * @param dataNode\n * @param funcName - the method's name\n * @param funcArgs - the method's arguments\n * @param oldValue\n * @param value\n */\nexport function initFunctionEmitEvent(\n\tdataNode: DataNode,\n\tfuncName: EVENT_NAMES,\n\tfuncArgs: ChangeEvent['args'],\n\toldValue: any,\n\tvalue: any,\n) {\n\tlet change: ChangeEvent = {\n\t\tpath: '', value, oldValue, type: funcName, args: funcArgs,\n\t};\n\n\tbubbleEmit(dataNode, change);\n\n\tif(dataNode[ND].deferredEvents) {\n\t\t// manually handle the side-effect events that were caught\n\t\t// in order to not bubble up, but should capture down\n\t\tfor(let event of dataNode[ND].deferredEvents!) {\n\t\t\tif(event.change.path === '') {\n\t\t\t\t// no path means its an event directly on the property, not on the parent.\n\t\t\t\t// i.e: not an event with path \"0\" on \".arr\", but an event with no path on \".arr[0]\".\n\t\t\t\t// function event on \"arr\" already ran, but now a regular event on \"arr[0]\" is due\n\t\t\t\tlet thisValue = getProxyValue(event.dataNode);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.shallow, thisValue, event.change);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.deep, thisValue, event.change);\n\t\t\t}\n\n\t\t\tif(event.shouldCapture) {\n\t\t\t\tcaptureEmit(event.dataNode, event.change);\n\t\t\t}\n\t\t}\n\t\tdelete dataNode[ND].deferredEvents;\n\t}\n\telse {\n\t\tconsole.warn(`no side effect events for ${funcName} were made`);\n\t}\n}","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Proxy methods are methods that will proxy JS built-in methods.\n// For examply, the proxy function for \"splice\" will handle some event stuff and then use\n// the actual \"splice\" function internally\n\"use strict\"\n\nimport { NODE_STATUSES, EVENTS, ND, NID } from './globals';\nimport { SpliceFunction, ShiftFunction, UnshiftFunction } from './types/proxy-methods';\nimport { initFunctionEmitEvent } from './event-emitter';\n\n\nexport const splice: SpliceFunction = function splice(\n\tthis,\n\tstart,\n\tdeleteCount,\n\t...items\n) {\n\tif(this.dataNode[NID].status !== NODE_STATUSES.active) {\n\t\treturn Array.prototype.splice.call(this.proxyNode[ND].proxy, start, deleteCount, ...items);\n\t}\n\n\tlet isActiveByInheritance = !this.dataNode[NID].hasOwnProperty('status');\n\tthis.dataNode[NID].status = NODE_STATUSES.splicing;\n\tlet oldValue = this.proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.splice.call(this.proxyNode[ND].proxy, start, deleteCount, ...items); // creates many side-effect events\n\tlet args = { start, deleteCount, items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete this.dataNode[NID].status;\n\t} else {\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\n\tinitFunctionEmitEvent(this.dataNode, EVENTS.splice, args, oldValue, this.proxyNode[ND].target);\n\n\treturn deleted;\n}\n\nexport const shift: ShiftFunction = function shift(this) {\n\tif(this.dataNode[NID].status !== NODE_STATUSES.active) {\n\t\t// if not active then run regular `shift`\n\t\t// which will reach the `set` of the ProxyHandler and will be blocked or events stopped, etc.\n\t\treturn Array.prototype.shift.call(this.proxyNode[ND].proxy);\n\t}\n\n\tlet isActiveByInheritance = !this.dataNode[NID].hasOwnProperty('status');\n\tthis.dataNode[NID].status = NODE_STATUSES.splicing;\n\tlet oldValue = this.proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.shift.call(this.proxyNode[ND].proxy); // creates many side-effect events\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete this.dataNode[NID].status;\n\t} else {\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\n\tinitFunctionEmitEvent(this.dataNode, EVENTS.shift, {}, oldValue, this.proxyNode[ND].target);\n\n\treturn deleted;\n}\n\nexport const unshift: UnshiftFunction = function unshift(this, ...items) {\n\tif(this.dataNode[NID].status !== NODE_STATUSES.active) {\n\t\treturn Array.prototype.shift.call(this.proxyNode[ND].proxy) as number;\n\t}\n\n\tlet isActiveByInheritance = !this.dataNode[NID].hasOwnProperty('status');\n\tthis.dataNode[NID].status = NODE_STATUSES.splicing;\n\tlet oldValue = this.proxyNode[ND].target.slice(0);\n\tlet newLength: number = Array.prototype.unshift.call(this.proxyNode[ND].proxy, ...items); // creates many side-effect events\n\tlet args = { items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete this.dataNode[NID].status;\n\t} else {\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\n\tinitFunctionEmitEvent(this.dataNode, EVENTS.unshift, args, oldValue, this.proxyNode[ND].target);\n\n\treturn newLength;\n}\n","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, NODE_STATUSES, PROXY_STATUSES, ND, NID } from './globals';\nimport type { TargetVariable, SomeObject } from './types/globals';\nimport type { ProxserveInstance, DataNode, ProxyNode, ProxserveInstanceMetadata } from './types/proxserve-class';\nimport { unproxify, createNodes } from './supporting-functions';\nimport * as pseudoMethods from './pseudo-methods';\nimport * as proxyMethods from './proxy-methods';\nimport { realtypeof, splitPath, evalPath } from './general-functions';\nimport { initEmitEvent } from './event-emitter';\n\nconst doNotProxifyPrefix = '_$';\nconst pseudoMethodsAlternativeNamingPrefix = '$';\n\n/**\n * save an array of all reserved function names\n * and also add synonyms to these functions\n */\nlet pseudoMethodsNames = Object.keys(pseudoMethods);\nfor(let i = pseudoMethodsNames.length - 1; i >= 0; i--) {\n\tlet name = pseudoMethodsNames[i];\n\tlet synonym = pseudoMethodsAlternativeNamingPrefix + name;\n\tpseudoMethods[synonym] = pseudoMethods[name];\n\tpseudoMethodsNames.push(synonym);\n}\n\ninterface MakeOptions {\n\tstrict?: ProxserveInstanceMetadata['strict'];\n\tmethodsEmitRaw?: ProxserveInstanceMetadata['methodsEmitRaw'];\n\t/** internal name of the instance */\n\tname?: string;\n\tdebug?: {\n\t\tdestroyDelay: ProxserveInstanceMetadata['destroyDelay'];\n\t};\n}\n\nexport class Proxserve {\n\t/**\n\t * make a new proxserve instance\n\t */\n\tstatic make<T>(target: TargetVariable, options = {} as MakeOptions): ProxserveInstance & T {\n\t\tconst {\n\t\t\tstrict = true,\n\t\t\tmethodsEmitRaw = false,\n\t\t\tname: rootName = '',\n\t\t\tdebug = { destroyDelay: 1000 },\n\t\t} = options;\n\n\t\tlet dataTreePrototype: DataNode = {\n\t\t\t[NID]: {\n\t\t\t\tstatus: NODE_STATUSES.active,\n\t\t\t\tname: rootName,\n\t\t\t},\n\t\t\t[ND]: { isTreePrototype: true } as DataNode[typeof ND],\n\t\t};\n\t\tlet proxyTreePrototype: ProxyNode = {\n\t\t\t[NID]: { status: PROXY_STATUSES.alive },\n\t\t\t[ND]: { isTreePrototype: true } as ProxyNode[typeof ND],\n\t\t};\n\n\t\tconst newNodes = createNodes(dataTreePrototype, '', proxyTreePrototype, target);\n\n\t\tconst metadata = {\n\t\t\tstrict,\n\t\t\tmethodsEmitRaw,\n\t\t\tdestroyDelay: debug.destroyDelay,\n\t\t\tdataTree: newNodes.dataNode,\n\t\t\tproxyTree: newNodes.proxyNode,\n\t\t} as ProxserveInstanceMetadata;\n\n\t\treturn Proxserve.createProxy<T>(metadata, metadata.dataTree);\n\t}\n\n\t/**\n\t * create a new proxy and a new node for a property of the parent's target-object\n\t */\n\tstatic createProxy<T>(\n\t\tmetadata: ProxserveInstanceMetadata,\n\t\tparentDataNode: DataNode,\n\t\ttargetProperty?: string,\n\t): ProxserveInstance & T {\n\t\tconst parentProxyNode = parentDataNode[ND].proxyNode!;\n\t\tlet dataNode: DataNode;\n\t\tlet proxyNode: ProxyNode;\n\n\t\tif(targetProperty === undefined) { //refering to own node and not a child property (meaning root object)\n\t\t\tdataNode = parentDataNode;\n\t\t\tproxyNode = parentProxyNode;\n\t\t}\n\t\telse {\n\t\t\t//create new or reset an existing data-node and then creates a new proxy-node\n\t\t\tconst newNodes = createNodes(\n\t\t\t\tparentDataNode,\n\t\t\t\ttargetProperty,\n\t\t\t\tparentProxyNode,\n\t\t\t\tparentProxyNode[ND].target[targetProperty],\n\t\t\t);\n\t\t\tdataNode = newNodes.dataNode;\n\t\t\tproxyNode = newNodes.proxyNode!;\n\t\t}\n\n\t\tlet target = proxyNode[ND].target;\n\n\t\tlet typeoftarget = realtypeof(target);\n\n\t\tif(proxyTypes[typeoftarget]) {\n\t\t\tlet revocable = Proxy.revocable<TargetVariable>(target, {\n\t\t\t\tget: (target: TargetVariable/*same as parent scope 'target'*/, property: string|symbol, proxy) => {\n\t\t\t\t\tif(metadata.methodsEmitRaw === false && Object.prototype.hasOwnProperty.call(proxyMethods, property) && property in Object.getPrototypeOf(target)) {\n\t\t\t\t\t\t// use a proxy method instead of the built-in method that is on the prototype chain\n\t\t\t\t\t\treturn proxyMethods[property].bind({ metadata, dataNode, proxyNode });\n\t\t\t\t\t}\n\t\t\t\t\telse if(pseudoMethodsNames.includes(property as string) && typeof target[property] === 'undefined') {\n\t\t\t\t\t\t// can access a pseudo function (or its synonym) if their keywords isn't used\n\t\t\t\t\t\treturn pseudoMethods[property].bind({ metadata, dataNode, proxyNode });\n\t\t\t\t\t}\n\t\t\t\t\telse if(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\treturn target[property]; // non-enumerable or non-path'able aren't proxied\n\t\t\t\t\t}\n\t\t\t\t\telse if(\n\t\t\t\t\t\tproxyNode[property] // there's a child node\n\t\t\t\t\t\t&& proxyNode[property][ND].proxy // it holds a proxy\n\t\t\t\t\t\t&& proxyNode[property][NID].status === PROXY_STATUSES.alive\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn proxyNode[property][ND].proxy;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn target[property];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\n\t\t\t\tset: (target/*same as parent scope 'target'*/, property, value, proxy) => { //'receiver' is proxy\n\t\t\t\t\t/**\n\t\t\t\t\t * property can be a regular object because of a few possible reasons:\n\t\t\t\t\t * 1. proxy is deleted from tree but user keeps accessing it then it means he saved a reference.\n\t\t\t\t\t * 2. it is a non-enumerable property which means it was intentionally hidden.\n\t\t\t\t\t * 3. property is a symbol and symbols can't be proxied because we can't create a normal path for them.\n\t\t\t\t\t *    these properties are not proxied and should not emit change-event.\n\t\t\t\t\t *    except for: length\n\t\t\t\t\t * 4. property is manually set as raw object with the special prefix.\n\t\t\t\t\t * TODO - make a list of all possible properties exceptions (maybe function 'name'?)\n\t\t\t\t\t */\n\t\t\t\t\tif(dataNode[NID].status === NODE_STATUSES.blocked) { //blocked from changing values\n\t\t\t\t\t\tconsole.error('object is blocked. can\\'t change value of property:', property);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(\n\t\t\t\t\t\ttypeof property === 'symbol'\n\t\t\t\t\t\t|| property.indexOf(doNotProxifyPrefix) === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(property !== 'length' && !target.propertyIsEnumerable(property)) {\n\t\t\t\t\t\t//if setting a whole new property then it is non-enumerable (yet) so a further test is needed\n\t\t\t\t\t\tlet descriptor = Object.getOwnPropertyDescriptor(target, property);\n\t\t\t\t\t\tif(typeof descriptor === 'object' && descriptor.enumerable === false) { //property was previously set\n\t\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; // should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t// about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = PROXY_STATUSES.deleted;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; // detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t// postpone this cpu intense function for later, probably when proxserve is not in use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = unproxify(value);\n\t\t\t\t\ttarget[property] = value; //assign new value\n\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\tlet typeofvalue = realtypeof(value);\n\t\t\t\t\tif(proxyTypes[typeofvalue]) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, property); // if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * TODO - this function is incomplete and doesn't handle all of 'descriptor' scenarios\n\t\t\t\t */\n\t\t\t\tdefineProperty: (target/*same as parent scope 'target'*/, property, descriptor) => {\n\t\t\t\t\tif(typeof property === 'symbol') {\n\t\t\t\t\t\tObject.defineProperty(target, property, descriptor);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = PROXY_STATUSES.deleted;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdescriptor.value = unproxify(descriptor.value);\n\t\t\t\t\tObject.defineProperty(target, property, descriptor); //defining the new value\n\t\t\t\t\tlet value = descriptor.value;\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\t//excluding non-enumerable properties from being proxied\n\t\t\t\t\tlet typeofvalue = realtypeof(descriptor.value);\n\t\t\t\t\tif(proxyTypes[typeofvalue] && descriptor.enumerable === true) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, property); //if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\tdeleteProperty: (target/*same as parent scope 'target'*/, property) => {\n\t\t\t\t\tif(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\t//non-proxied properties simply get deleted and nothing more\n\t\t\t\t\t\tdelete target[property];\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(dataNode[NID].status === NODE_STATUSES.blocked) { //blocked from changing values\n\t\t\t\t\t\tconsole.error(`can't delete property '${property}'. object is blocked.`);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(property in target) {\n\t\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\t\tproxyNode[property][NID].status = PROXY_STATUSES.deleted;\n\t\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete target[property]; // actual delete\n\n\t\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, undefined, false);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn true; //do nothing because there's nothing to delete\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as ProxyHandler<TargetVariable>) as { proxy: ProxserveInstance & T, revoke: () => void };\n\n\t\t\tproxyNode[ND].proxy = revocable.proxy;\n\t\t\tproxyNode[ND].revoke = revocable.revoke;\n\n\t\t\tif(proxyTypes[typeoftarget]) {\n\t\t\t\tlet keys = Object.keys(target); //handles both Objects and Arrays\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\tif (key.indexOf(doNotProxifyPrefix) === 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet typeofproperty = realtypeof(target[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, key); //recursively make child objects also proxies\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.warn(`Type of \"${typeoftarget}\" is not implemented`);\n\t\t\t}\n\n\t\t\treturn revocable.proxy;\n\t\t}\n\t\telse {\n\t\t\tconst types = Object.keys(proxyTypes);\n\t\t\tthrow new Error(`Must observe an ${types.join('/')}`);\n\t\t}\n\t}\n\n\t/**\n\t * Recursively revoke proxies, allowing them to be garbage collected.\n\t * this functions delays 1000 milliseconds to let time for all events to finish\n\t */\n\tstatic destroy(proxy: ProxserveInstance) {\n\t\tlet proxyNode: ProxyNode;\n\t\ttry {\n\t\t\tconst nodes = proxy.$getProxserveNodes();\n\t\t\tproxyNode = nodes.proxyNode;\n\t\t} catch(error) {\n\t\t\treturn; // proxy variable isn't a proxy\n\t\t}\n\n\t\tif(proxyNode[NID].status === PROXY_STATUSES.alive) {\n\t\t\tproxyNode[NID].status = PROXY_STATUSES.deleted;\n\t\t}\n\n\t\tlet typeofproxy = realtypeof(proxy);\n\n\t\tif(proxyTypes[typeofproxy]) {\n\t\t\tlet keys = Object.keys(proxy); // handles both Objects and Arrays\n\t\t\tfor(let key of keys) {\n\t\t\t\tif (key.indexOf(doNotProxifyPrefix) === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlet typeofproperty = realtypeof(proxy[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\t// going to proxy[key], which is deleted, will return the original target so we will bypass it\n\t\t\t\t\t\tProxserve.destroy(proxyNode[key][ND].proxy!);\n\t\t\t\t\t}\n\t\t\t\t} catch(error) {\n\t\t\t\t\tconsole.error(error); // don't throw and kill the whole process just if this iteration fails\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproxyNode[ND].revoke?.();\n\t\t\t//proxyNode[ND].proxy = undefined;\n\t\t\tproxyNode[NID].status = PROXY_STATUSES.revoked;\n\t\t}\n\t\telse {\n\t\t\tconsole.warn(`Type of \"${typeofproxy}\" is not implemented`);\n\t\t}\n\t}\n\n\t/**\n\t * splits a path to an array of properties\n\t */\n\tstatic splitPath(path: string): Array<string|number> {\n\t\treturn splitPath(path);\n\t}\n\n\t/**\n\t * evaluate a long path and return the designated object and its referred property\n\t */\n\tstatic evalPath(obj: SomeObject, path: string): {\n\t\tobject: SomeObject,\n\t\tproperty: string|number,\n\t\tvalue: any,\n\t} {\n\t\treturn evalPath(obj, path);\n\t}\n}"],"names":["$66763b9de58a4cbb$export$f7e0aa381a5261fc","Symbol","for","$66763b9de58a4cbb$export$d1c20e4ad7d32581","$66763b9de58a4cbb$export$94b8be4ec3303efd","Object","Array","$66763b9de58a4cbb$export$ee1d4171033e00ef","NODE_STATUSES","$66763b9de58a4cbb$export$3f0ec6107d502ceb","PROXY_STATUSES","$66763b9de58a4cbb$export$fa3d5b535a2458a1","EVENTS","$fda00bc7ddcd3bc7$export$99a2acdf670c1bf4","variable","rawType","prototype","toString","call","substring","length","WeakSet","$fda00bc7ddcd3bc7$export$824c337f43f2b64d","path","i","betweenBrackets","onlyDigits","resultsArr","tmp","char","push","parseInt","code","charCodeAt","$fda00bc7ddcd3bc7$export$8ffa680996c65fde","obj","object","property","value","segments","Error","$a72f28e28e24748b$export$1b787634d8e3bf02","typeofobj","console","warn","$a72f28e28e24748b$export$a58c3ed528c9c399","typeofvalue","target","$getOriginalTarget","error","keys","key","$a72f28e28e24748b$export$953dd193a01bd6ec","parentDataNode","parentProxyNode","propertyPath","proxyNode","dataNode","create","parentNode","listeners","shallow","deep","status","isTreePrototype","assign","undefined","$cb4cc1e2f387f5a6$export$fa6813432f753b0d","this","stopped","$cb4cc1e2f387f5a6$export$837bd02682cd3db9","blocked","$cb4cc1e2f387f5a6$export$234c45b355edd85b","force","metadata","dataTree","active","$cb4cc1e2f387f5a6$export$af631764ddc44097","args","listener","id","once","event","events","isArray","names","join","listenersPool","listenerObj","type","func","$cb4cc1e2f387f5a6$export$d2de3aaeafa91619","$cb4cc1e2f387f5a6$var$removeById","listenersArr","splice","$cb4cc1e2f387f5a6$export$b03e9483f936dccb","fullPath","$cb4cc1e2f387f5a6$export$6f2e3a6079f109b1","$cb4cc1e2f387f5a6$export$35f261dd63190ac1","$cb4cc1e2f387f5a6$export$e4722608b73ef3f1","name","$cb4cc1e2f387f5a6$export$533e55abf9329f7b","$cb4cc1e2f387f5a6$export$c3c6db5039118967","$08aa8f4cfdbb0713$var$getProxyValue","alive","proxy","$08aa8f4cfdbb0713$export$febbc75e71f4ca1b","oldValue","wasOldValueProxy","isValueProxy","deferredEvents","changeType","update","delete","splicing","change","shouldCapture","$08aa8f4cfdbb0713$var$bubbleEmit","$08aa8f4cfdbb0713$var$captureEmit","thisValue","$08aa8f4cfdbb0713$var$iterateAndEmit","nextChange","subValue","subOldValue","subChange","childNode","includes","$08aa8f4cfdbb0713$export$29f2d3a310653bb4","funcName","funcArgs","$f5798ab020ffb663$export$869882364835d202","start","deleteCount","items","isActiveByInheritance","hasOwnProperty","slice","deleted","$f5798ab020ffb663$export$fba63a578e423eb","shift","$f5798ab020ffb663$export$37cdb546b806ae87","newLength","unshift","$f3a59425b0ffb76f$var$pseudoMethodsNames","$cb4cc1e2f387f5a6$exports","synonym","$f3a59425b0ffb76f$export$d402cf8388053971","static","options","strict","methodsEmitRaw","rootName","debug","destroyDelay","newNodes","proxyTree","createProxy","targetProperty","typeoftarget","revocable","Proxy","get","$f5798ab020ffb663$exports","getPrototypeOf","bind","propertyIsEnumerable","set","indexOf","descriptor","getOwnPropertyDescriptor","enumerable","isOldValueProxy","setTimeout","destroy","defineProperty","deleteProperty","revoke","typeofproperty","types","$getProxserveNodes","typeofproxy","error1","revoked"],"version":3,"file":"index.min.js.map"}