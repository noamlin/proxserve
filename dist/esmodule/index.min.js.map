{"mappings":"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","sources":["src/globals.ts","src/general-functions.ts","src/pseudo-methods.ts","src/supporting-functions.ts","src/event-emitter.ts","src/proxy-methods.ts","src/index.ts"],"sourcesContent":["/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nexport const ND = Symbol.for('proxserve_node_data'); // key for the data of a node\nexport const NID = Symbol.for('proxserve_node_inherited_data'); // key for the inherited data of a node\n\n// acceptable types to be proxied\nexport const proxyTypes = {\n\t\"Object\": true,\n\t\"Array\": true,\n};\n\n// statuses of data-nodes\nexport enum NODE_STATUSES {\n\tactive = 'active',\n\tstopped = 'stopped',\n\tblocked = 'blocked',\n\tsplicing = 'splicing',\n};\n\n// statuses of proxies\nexport enum PROXY_STATUSES {\n\talive = 'alive',\n\tdeleted = 'deleted',\n\trevoked = 'revoked',\n};\n\n// event names that can be emitted\nexport enum EVENTS {\n\tcreate = 'create',\n\tupdate = 'update',\n\tdelete = 'delete',\n\tsplice = 'splice',\n\tshift = 'shift',\n\tunshift = 'unshift',\n};","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { SomeObject, SomeArray, VariableTypes } from './types/globals';\n\n/**\n * return a string representing the full type of the variable\n */\nexport function realtypeof(variable: any): VariableTypes {\n\tlet rawType = Object.prototype.toString.call(variable); //[object Object], [object Array], [object Number]...\n\treturn rawType.substring(8, rawType.length - 1) as VariableTypes;\n}\n\n/**\n * check if variable is a number or a string of a number\n * @param variable \n */\n/*export function isNumeric(variable: any): boolean {\n\tif(typeof variable === 'string' && variable === '') {\n\t\treturn false;\n\t}\n\t\n\treturn !isNaN(variable as number);\n}*/\n\n/**\n * recursively clones objects and array\n */\nconst simpleCloneSet = new WeakSet();\nexport function simpleClone(variable: any): any {\n\tlet typeofvar = realtypeof(variable);\n\n\tif(typeofvar === 'Object') {\n\t\tconst obj = variable as SomeObject;\n\t\tsimpleCloneSet.add(obj);\n\t\tconst cloned = {};\n\t\tlet keys = Object.keys(obj);\n\t\tfor(let key of keys) {\n\t\t\tif(simpleCloneSet.has(obj[key])) {\n\t\t\t\tcloned[key] = obj[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[key] = simpleClone(obj[key]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse if(typeofvar === 'Array') {\n\t\tconst arr = variable as SomeArray;\n\t\tsimpleCloneSet.add(arr);\n\t\tconst cloned = [] as any[];\n\t\tfor(let i = 0; i < arr.length; i++) {\n\t\t\tif(simpleCloneSet.has(arr[i])) {\n\t\t\t\tcloned[i] = arr[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcloned[i] = simpleClone(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn cloned;\n\t}\n\telse { // hopefully a primitive\n\t\tif(typeofvar !== 'Undefined' && typeofvar !== 'Null' && typeofvar !== 'Boolean' && typeofvar !== 'Number'\n\t\t&& typeofvar !== 'BigInt' && typeofvar !== 'String') {\n\t\t\tconsole.warn(`Can't clone a variable of type ${typeofvar}`);\n\t\t}\n\t\treturn variable;\n\t}\n}\n\n/**\n * splits a path to an array of properties\n * (benchmarked and is faster than regex and split())\n * @param path \n */\nexport function splitPath(path: string): Array<string|number> {\n\tif(typeof path !== 'string' || path === '') {\n\t\treturn [];\n\t}\n\t\n\tlet i = 0, betweenBrackets = false, onlyDigits = false;\n\t//loop will skip over openning '.' or '['\n\tif(path[0] === '.') {\n\t\ti = 1;\n\t} else if(path[0] === '[') {\n\t\ti = 1;\n\t\tbetweenBrackets = true;\n\t\tonlyDigits = true;\n\t}\n\n\tlet resultsArr = [] as Array<string|number>;\n\tlet tmp = '';\n\tfor(; i < path.length; i++) {\n\t\tlet char = path[i];\n\n\t\tif(betweenBrackets) {\n\t\t\tif(char === ']') {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tresultsArr.push(parseInt(tmp, 10));\n\t\t\t\t} else {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t}\n\n\t\t\t\tbetweenBrackets = false;\n\t\t\t\tonlyDigits = false;\n\t\t\t\ttmp = '';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(onlyDigits) {\n\t\t\t\t\tlet code = char.charCodeAt(0);\n\t\t\t\t\tif(code < 48 || code > 57) { //less than '0' char or greater than '9' char\n\t\t\t\t\t\tonlyDigits = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(char === '[') {\n\t\t\t\tbetweenBrackets = true;\n\t\t\t\tonlyDigits = true;\n\t\t\t}\n\t\t\t\n\t\t\t//check if starting a new property but avoid special case of [prop][prop]\n\t\t\tif(char === '.' || char === '[') {\n\t\t\t\tif(tmp !== '') {\n\t\t\t\t\tresultsArr.push(tmp);\n\t\t\t\t\ttmp = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp += char;\n\t\t\t}\n\t\t}\n\t}\n\tif(tmp !== '') {\n\t\tresultsArr.push(tmp);\n\t}\n\treturn resultsArr;\n}\n\n/**\n * evaluate a long path and return the designated object and its referred property\n */\nexport function evalPath(obj: SomeObject, path: string): {\n\tobject: SomeObject,\n\tproperty: string | number,\n\tvalue: any,\n} {\n\tif(path === '') {\n\t\treturn {\n\t\t\tobject: obj,\n\t\t\tproperty: '',\n\t\t\tvalue: obj,\n\t\t};\n\t}\n\n\tlet segments = splitPath(path);\n\tlet i: number;\n\tfor(i = 0; i <= segments.length - 2; i++) { // iterate until one before last property because they all must exist\n\t\tobj = obj[segments[i]];\n\t\tif(typeof obj === 'undefined') {\n\t\t\tthrow new Error(`Invalid path was given - \"${path}\"`);\n\t\t}\n\t}\n\treturn {\n\t\tobject: obj,\n\t\tproperty: segments[i],\n\t\tvalue: obj[ segments[i] ],\n\t};\n}","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Pseudo methods are methods that aren't really on the object - not as a property nor via its prototype\n// thus they will not be retrieved via \"for..in\" and etcetera. Their property name is actually undefined, but\n// calling it will return the method via the JS proxy's \"get\" handler.\n// (i.e. someProxserve.pseudoFunction will return the pseudoFunction)\n\"use strict\"\n\nimport { EVENTS, NODE_STATUSES, ND, NID } from './globals';\nimport { ListenerData, EVENT_NAMES } from './types/globals';\nimport {\n\tStopFunction, BlockFunction, ActivateFunction,\n\tOnFunction, OnceFunction,\n\tRemoveListenerFunction, RemoveAllListenersFunction,\n\tGetProxserveNameFunction, WhoAMI,\n\tGetOriginalTargetFunction, GetProxserveNodesFunction,\n} from './types/pseudo-methods';\nimport { createNodes } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\nexport const stop: StopFunction = function stop(this) {\n\tthis.dataNode[NID].status = NODE_STATUSES.stopped;\n};\n\nexport const block: BlockFunction = function block(this) {\n\tthis.dataNode[NID].status = NODE_STATUSES.blocked;\n};\n\nexport const activate: ActivateFunction = function activate(this, force = false): void {\n\tif(force || this.dataNode === this.metadata.dataTree) { // force activation or we are on root proxy\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\telse {\n\t\tdelete this.dataNode[NID].status;\n\t}\n};\n\nexport const on: OnFunction = function on(this, args) {\n\tconst {\n\t\tpath = '',\n\t\tlistener,\n\t\tid,\n\t\tdeep = false,\n\t\tonce = false,\n\t} = args;\n\t// its nicer to expose `event` to the user,\n\t// but since it is semi-reserved word, we internally rename it to `events`\n\tlet { event: events } = args;\n\n\tif(events === 'change') {\n\t\tevents = Object.keys(EVENTS) as EVENT_NAMES[]; // will listen to all events\n\t} else if(!Array.isArray(events)) {\n\t\tevents = [events];\n\t}\n\n\tfor(let event of events) {\n\t\tif(!EVENTS[event]) {\n\t\t\tconst names = Object.keys(EVENTS);\n\t\t\tthrow new Error(`${event} is not a valid event. valid events are ${names.join(',')}`);\n\t\t}\n\t}\n\t\n\tlet dataNode = this.dataNode;\n\tlet segments = splitPath(path);\n\tfor(let property of segments) { // traverse down the tree\n\t\tif(!dataNode[property]) {\n\t\t\t// create data-nodes if needed (in dataNode[property]), but don't create/overwrite proxy-nodes\n\t\t\tcreateNodes(dataNode, property);\n\t\t}\n\n\t\tdataNode = dataNode[property];\n\t}\n\n\tlet listenersPool = dataNode[ND].listeners.shallow;\n\tif(deep) {\n\t\tlistenersPool = dataNode[ND].listeners.deep;\n\t}\n\n\tlet listenerObj = {\n\t\ttype: events,\n\t\tonce,\n\t\tfunc: listener\n\t} as ListenerData;\n\n\tif(id !== undefined) {\n\t\tlistenerObj.id = id;\n\t}\n\tlistenersPool.push(listenerObj);\n};\n\nexport const once: OnceFunction = function once(this, args) {\n\targs.once = true;\n\ton.call(this, args);\n};\n\nfunction removeById(listenersArr: ListenerData[], id: string | number | Function): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listenerObj = listenersArr[i];\n\t\tif((id !== undefined && listenerObj.id === id) || listenerObj.func === id) {\n\t\t\tlistenersArr.splice(i, 1);\n\t\t}\n\t}\n}\n\nexport const removeListener: RemoveListenerFunction = function removeListener(this, args) {\n\tconst { id, path = '' } = args;\n\tconst fullPath = `${this.dataNode[ND].path}${path}`;\n\tlet dataNode = this.dataNode;\n\tconst segments = splitPath(path);\n\n\t// traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove listener from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tremoveById(dataNode[ND].listeners.shallow, id);\n\tremoveById(dataNode[ND].listeners.deep, id);\n};\n\nexport const removeAllListeners: RemoveAllListenersFunction = function removeAllListeners(this, path = '') {\n\tconst fullPath = `${this.dataNode[ND].path}${path}`;\n\tconst segments = splitPath(path);\n\tlet dataNode = this.dataNode;\n\n\t//traverse down the tree\n\tfor(let property of segments) {\n\t\tif(!dataNode[property]) {\n\t\t\tconsole.warn(`can't remove all listeners from a non-existent path '${fullPath}'`);\n\t\t\treturn;\n\t\t}\n\t\tdataNode = dataNode[property];\n\t}\n\n\tdataNode[ND].listeners.shallow = [] as ListenerData[];\n\tdataNode[ND].listeners.deep = [] as ListenerData[];\n};\n\nexport const getOriginalTarget: GetOriginalTargetFunction = function getOriginalTarget(this) {\n\treturn this.proxyNode[ND].target;\n};\n\nexport const getProxserveName: GetProxserveNameFunction = function getProxserveName(this) {\n\treturn this.dataNode[NID].name;\n};\n\nexport const whoami: WhoAMI = function whoami(this) {\n\treturn this.dataNode[NID].name + this.dataNode[ND].path;\n};\n\nexport const getProxserveNodes: GetProxserveNodesFunction = function getProxserveNodes(this) {\n\treturn { dataNode: this.dataNode, proxyNode: this.proxyNode };\n};","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, ND, NID, EVENTS } from './globals';\nimport type { TargetVariable, ListenerData, ChangeEvent } from './types/globals';\nimport type { DataNode, ProxyNode, ProxserveInstanceMetadata, PseudoThis } from './types/proxserve-class';\nimport { realtypeof } from './general-functions';\nimport { whoami } from './pseudo-methods';\n\n/**\n * Convert property name to valid path segment\n */\nexport function property2path(obj: any, property: string|number): string {\n\tif(typeof property === 'symbol') {\n\t\tthrow new Error(`property of type \"symbol\" isn't path'able`);\n\t}\n\n\tconst typeofobj = realtypeof(obj);\n\tswitch(typeofobj) {\n\t\tcase 'Object': {\n\t\t\treturn `.${property}`;\n\t\t}\n\t\tcase 'Array': {\n\t\t\treturn `[${property}]`;\n\t\t}\n\t\tdefault: {\n\t\t\tconsole.warn(`Not Implemented (type of '${typeofobj}')`);\n\t\t\treturn property as string;\n\t\t}\n\t}\n}\n\n/**\n * recursively switch between all proxies to their original targets.\n * note: original targets should never hold proxies under them,\n * thus altering the object references (getting from 'value') should be ok.\n * if whoever uses this library decides to\n * \t1. create a proxy with children (sub-proxies)\n * \t2. create a regular object\n * \t3. adding sub-proxies to the regular object\n * \t4. attaching the regular object to the proxy\n * then this regular object will be altered.\n */\nexport function unproxify(value: any): any {\n\tconst typeofvalue = realtypeof(value);\n\n\tif(proxyTypes[typeofvalue]) {\n\t\tlet target = value;\n\t\ttry {\n\t\t\ttarget = value.$getOriginalTarget();\n\t\t} catch(error) {}\n\n\t\tswitch(typeofvalue) {\n\t\t\tcase 'Object':\n\t\t\t\tlet keys = Object.keys(target);\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\ttarget[key] = unproxify(target[key]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Array':\n\t\t\t\tfor(let i=0; i < target.length; i++) {\n\t\t\t\t\ttarget[i] = unproxify(target[i]); // maybe alters target and maybe returning the exact same object\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Not Implemented (type of '${typeofvalue}')`);\n\t\t}\n\n\t\treturn target;\n\t}\n\telse {\n\t\treturn value; // primitive\n\t}\n}\n\n/**\n * create or reset a node in a tree of meta-data (mainly path related)\n * and optionally create a node in a tree of proxy data (mainly objects related)\n */\nexport function createNodes(\n\tparentDataNode: DataNode,\n\tproperty: string | number,\n\tparentProxyNode?: ProxyNode,\n\ttarget?: TargetVariable,\n): { dataNode: DataNode, proxyNode: ProxyNode | undefined } {\n\t//handle property path\n\tlet propertyPath: string;\n\tif(parentProxyNode?.[ND].target) {\n\t\tpropertyPath = property2path(parentProxyNode[ND].target, property);\n\t} else {\n\t\tpropertyPath = property2path({}, property); // if parent doesn't have target then treat it as object\n\t}\n\t\n\t//handle data node\n\tlet dataNode: DataNode = parentDataNode[property]; // try to receive existing data-node\n\tif(!dataNode) {\n\t\tdataNode = {\n\t\t\t[NID]: Object.create(parentDataNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\tparentNode: parentDataNode,\n\t\t\t\tlisteners: {\n\t\t\t\t\tshallow: [] as ListenerData[],\n\t\t\t\t\tdeep: [] as ListenerData[],\n\t\t\t\t},\n\t\t\t}\n\t\t} as DataNode;\n\t\tparentDataNode[property] = dataNode;\n\t}\n\n\tdelete dataNode[NID].status; // clears old status in case a node previously existed\n\t// updates path (for rare case where parent was array and then changed to object or vice versa)\n\tif(!parentDataNode[ND].isTreePrototype) {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: parentDataNode[ND].path + propertyPath,\n\t\t\tpropertyPath\n\t\t});\n\t}\n\telse {\n\t\tObject.assign(dataNode[ND], {\n\t\t\tpath: '',\n\t\t\tpropertyPath: ''\n\t\t});\n\t}\n\n\t// handle proxy node\n\tlet proxyNode: ProxyNode | undefined;\n\tif(parentProxyNode) {\n\t\tproxyNode = {\n\t\t\t[NID]: Object.create(parentProxyNode[NID]),\n\t\t\t[ND]: {\n\t\t\t\ttarget: target as TargetVariable,\n\t\t\t\tdataNode,\n\t\t\t},\n\t\t};\n\n\t\tparentProxyNode[property] = proxyNode;\n\n\t\t// attach nodes to each other\n\t\tdataNode[ND].proxyNode = proxyNode;\n\t} else {\n\t\t// this scenario is dangerous and exists only for `on()` of future variables (paths) that don't yet exist\n\t\tproxyNode = undefined;\n\t}\n\n\treturn { dataNode, proxyNode };\n}\n\nlet noStackFlag = false;\nexport function stackTraceLog(\n\tlogLevel: ProxserveInstanceMetadata['trace'],\n\tdataNode: DataNode,\n\tchange: ChangeEvent,\n) {\n\tif (logLevel === 'none') {\n\t\treturn;\n\t}\n\n\tconst err = new Error();\n\tconst stack = err.stack;\n\t\n\tif (!stack) {\n\t\tif (!noStackFlag) {\n\t\t\t// log this only once. no need to spam.\n\t\t\tconsole.error('Can\\'t log stack trace of proxserve. browser/runtime doesn\\'t support Error.stack');\n\t\t\tnoStackFlag = true;\n\t\t}\n\t\treturn;\n\t}\n\n\t// break stack to individual lines. each line will point to a file and function.\n\tconst lines = stack.split('\\n').map((value) => {\n\t\treturn value.trim();\n\t});\n\t// remove first and useless Error line.\n\tif (lines[0].toLowerCase().indexOf('error') === 0) {\n\t\tlines.shift();\n\t}\n\t// delete this function's own line.\n\tlines.shift();\n\t// delete `initEmitEvent` line.\n\tlines.shift();\n\n\t// write our message head.\n\tconst pathname = whoami.call({ dataNode } as PseudoThis);\n\tlet title = `${pathname} has been `;\n\tswitch (change.type) {\n\t\tcase EVENTS.create: title += 'created'; break;\n\t\tcase EVENTS.update: title += 'updated'; break;\n\t\tcase EVENTS.delete: title += 'deleted'; break;\n\t}\n\tlines.unshift(title);\n\n\tconsole.log(lines.join('\\n'));\n}\n","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { EVENTS, NODE_STATUSES, PROXY_STATUSES, ND, NID } from './globals';\nimport type { EVENT_NAMES, ChangeEvent, DeferredEvent, ListenerData } from './types/globals';\nimport type { DataNode, ProxserveInstanceMetadata } from './types/proxserve-class';\nimport { property2path, stackTraceLog } from './supporting-functions';\nimport { splitPath } from './general-functions';\n\n/**\n * try to get the proxy-object from a data-node. if can't then from it's parent's proxy\n * @param dataNode \n * @param property - the property as the dataNode is assigned on its parent\n */\nfunction getProxyValue(dataNode: DataNode, property?: string): any {\n\tif(dataNode[ND].proxyNode && dataNode[ND].proxyNode[NID].status === PROXY_STATUSES.alive) {\n\t\treturn dataNode[ND].proxyNode[ND].proxy; // actual proxy of child node\n\t}\n\telse {\n\t\tif(!property) {\n\t\t\t// my property on the parent\n\t\t\tproperty = splitPath(dataNode[ND].propertyPath)[0] as string;\n\t\t}\n\n\t\tlet parentNode = dataNode[ND].parentNode;\n\n\t\tif(parentNode[ND].proxyNode && parentNode[ND].proxyNode[NID].status === PROXY_STATUSES.alive) {\n\t\t\treturn parentNode[ND].proxyNode[ND].proxy?.[property]; // proxy or primitive via parent's proxy object\n\t\t}\n\t\telse {\n\t\t\t// if we reached here then probably we are on a capture phase of a deep deletion.\n\t\t\t// for example 'obj.sub1.sub2' gets 'delete obj.sub1' so now there are no values for 'sub2' nor its parent 'sub1'.\n\t\t\t// the warning is turned off because this situation seems okay\n\t\t\t// console.warn(`reached a capture level where neither child not parent proxy-nodes exist`);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n/**\n * process event and then bubble up and capture down the data tree\n */\nexport function initEmitEvent(\n\tdataNode: DataNode,\n\tproperty: string,\n\toldValue: any,\n\twasOldValueProxy: boolean,\n\tvalue: any,\n\tisValueProxy: boolean,\n\ttrace?: ProxserveInstanceMetadata['trace'],\n) {\n\tif(oldValue === value // no new change was made\n\t|| !dataNode[ND].proxyNode) { // proxy-node is detached from data-node\n\t\treturn;\n\t}\n\n\tlet proxyNode = dataNode[ND].proxyNode;\n\tif(proxyNode[NID].status !== PROXY_STATUSES.alive) { // altered a deleted proxy\n\t\treturn;\n\t}\n\n\tlet changeType = EVENTS.update;\n\tif(value === undefined) {\n\t\tchangeType = EVENTS.delete;\n\t} else if(oldValue === undefined) {\n\t\tchangeType = EVENTS.create;\n\t}\n\n\tlet deferredEvents: DeferredEvent[] | undefined;\n\t// altering properties of an array that's in the middle of a splicing phase\n\tif(dataNode[NID].status === NODE_STATUSES.splicing) {\n\t\t// initiate (if needed) an object to hold side effect events\n\t\tif(!dataNode[ND].deferredEvents) {\n\t\t\tdataNode[ND].deferredEvents = [];\n\t\t}\n\t\t// save a reference to the deferredEvents\n\t\tdeferredEvents = dataNode[ND].deferredEvents;\n\t}\n\n\tlet path: string;\n\tif(dataNode[property]) { // changed a property which has its own data node on the tree\n\t\tdataNode = dataNode[property];\n\t\tpath = '';\n\t} else {\n\t\tpath = property2path(proxyNode[ND].target, property);\n\t}\n\n\tlet change: ChangeEvent = {\n\t\tpath, value, oldValue, type: changeType,\n\t};\n\n\tif(!deferredEvents) {\n\t\tif (trace === 'normal' || trace === 'verbose') {\n\t\t\tstackTraceLog(trace, dataNode, change);\n\t\t}\n\t\tbubbleEmit(dataNode, change, property);\n\t\n\t\tif(wasOldValueProxy || isValueProxy) { // old value or new value are proxy meaning they are objects with children\n\t\t\tcaptureEmit(dataNode, change);\n\t\t}\n\t}\n\telse {\n\t\tdeferredEvents.push({dataNode, change, shouldCapture: wasOldValueProxy || isValueProxy});\n\t}\n}\n\n/**\n * bubbling phase - go up the data tree and emit\n * @param dataNode\n * @param change\n * @param property - property name of the data-node (i.e. as the data-node is assigned to its parent)\n */\nfunction bubbleEmit(dataNode: DataNode, change: ChangeEvent, property?: string): void {\n\tif(dataNode[NID].status === NODE_STATUSES.stopped) {\n\t\treturn; // not allowed to emit\n\t}\n\n\tlet thisValue = getProxyValue(dataNode, property);\n\n\tif(change.path === '') { // iterate over 'shallow' listeners\n\t\titerateAndEmit(dataNode[ND].listeners.shallow, thisValue, change);\n\t}\n\n\t// iterate over 'deep' listeners\n\titerateAndEmit(dataNode[ND].listeners.deep, thisValue, change);\n\n\tif(!dataNode[ND].parentNode[ND].isTreePrototype) { // we are not on root node yet\n\t\t// create a shallow copy of 'change' and update its path\n\t\t// (we don't want to alter the 'change' object that was just emitted to a listener)\n\t\tlet nextChange: ChangeEvent = {\n\t\t\t...change,\n\t\t\tpath: dataNode[ND].propertyPath + change.path\n\t\t};\n\n\t\tbubbleEmit(dataNode[ND].parentNode, nextChange);\n\t}\n}\n\n/**\n * capturing phase - go down the data tree and emit\n * @param dataNode\n * @param change\n */\nfunction captureEmit(dataNode: DataNode, change: ChangeEvent): void {\n\tlet keys = Object.keys(dataNode);\n\tfor(let key of keys) {\n\t\tlet subValue = (typeof change.value === 'object' && change.value !== null) ? change.value[key] : undefined;\n\t\tlet subOldValue = (typeof change.oldValue === 'object' && change.oldValue !== null) ? change.oldValue[key] : undefined;\n\t\tif(subValue !== subOldValue) { //if not both undefined or same primitive or the same object\n\t\t\tlet changeType = EVENTS.update;\n\t\t\tif(subValue === undefined) {\n\t\t\t\tchangeType = EVENTS.delete;\n\t\t\t} else if(subOldValue === undefined) {\n\t\t\t\tchangeType = EVENTS.create;\n\t\t\t}\n\n\t\t\tlet subChange: ChangeEvent = {\n\t\t\t\tpath: '',\n\t\t\t\toldValue: subOldValue,\n\t\t\t\tvalue: subValue,\n\t\t\t\ttype: changeType\n\t\t\t}\n\n\t\t\t// failing the status check will not emit for current property (but sub-properties might still be forcibly active)\n\t\t\tlet childNode = dataNode[key];\n\t\t\tif(childNode[NID].status !== NODE_STATUSES.stopped) {\n\t\t\t\tlet thisValue = getProxyValue(childNode, key);\n\t\t\t\titerateAndEmit(childNode[ND].listeners.shallow, thisValue, subChange);\n\t\t\t}\n\n\t\t\tcaptureEmit(childNode, subChange);\n\t\t}\n\t}\n}\n\n/**\n * iterate over an array of listeners, handle 'once' listeners and emit\n * @param listenersArr \n * @param thisValue \n * @param change \n */\nfunction iterateAndEmit(listenersArr: ListenerData[], thisValue: any, change: ChangeEvent): void {\n\tfor(let i = listenersArr.length - 1; i >= 0; i--) {\n\t\tlet listener = listenersArr[i];\n\t\tif(listener.type.includes(change.type)) {\n\t\t\tif(listener.once === true) {\n\t\t\t\tlistenersArr.splice(i, 1);\n\t\t\t}\n\t\t\tlistener.func.call(thisValue, change);\n\t\t}\n\t}\n}\n\n/**\n * process special event for a built-in method and then bubble up the data tree\n * @param dataNode\n * @param funcName - the method's name\n * @param funcArgs - the method's arguments\n * @param oldValue\n * @param value\n */\nexport function initFunctionEmitEvent(\n\tdataNode: DataNode,\n\tfuncName: EVENT_NAMES,\n\tfuncArgs: ChangeEvent['args'],\n\toldValue: any,\n\tvalue: any,\n) {\n\tlet change: ChangeEvent = {\n\t\tpath: '', value, oldValue, type: funcName, args: funcArgs,\n\t};\n\n\tbubbleEmit(dataNode, change);\n\n\tif(dataNode[ND].deferredEvents) {\n\t\t// manually handle the side-effect events that were caught\n\t\t// in order to not bubble up, but should capture down\n\t\tfor(let event of dataNode[ND].deferredEvents!) {\n\t\t\tif(event.change.path === '') {\n\t\t\t\t// no path means its an event directly on the property, not on the parent.\n\t\t\t\t// i.e: not an event with path \"0\" on \".arr\", but an event with no path on \".arr[0]\".\n\t\t\t\t// function event on \"arr\" already ran, but now a regular event on \"arr[0]\" is due\n\t\t\t\tlet thisValue = getProxyValue(event.dataNode);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.shallow, thisValue, event.change);\n\t\t\t\titerateAndEmit(event.dataNode[ND].listeners.deep, thisValue, event.change);\n\t\t\t}\n\n\t\t\tif(event.shouldCapture) {\n\t\t\t\tcaptureEmit(event.dataNode, event.change);\n\t\t\t}\n\t\t}\n\t\tdelete dataNode[ND].deferredEvents;\n\t}\n\telse {\n\t\tconsole.warn(`no side effect events for ${funcName} were made`);\n\t}\n}","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n// Proxy methods are methods that will proxy JS built-in methods.\n// For examply, the proxy function for \"splice\" will handle some event stuff and then use\n// the actual \"splice\" function internally\n\"use strict\"\n\nimport { NODE_STATUSES, EVENTS, ND, NID } from './globals';\nimport { SpliceFunction, ShiftFunction, UnshiftFunction } from './types/proxy-methods';\nimport { initFunctionEmitEvent } from './event-emitter';\n\n\nexport const splice: SpliceFunction = function splice(\n\tthis,\n\tstart,\n\tdeleteCount,\n\t...items\n) {\n\tif(this.dataNode[NID].status !== NODE_STATUSES.active) {\n\t\t// if not active then run regular `splice`\n\t\t// which will reach the `set` of the ProxyHandler and will be blocked or events stopped, etc.\n\t\treturn Array.prototype.splice.call(this.proxyNode[ND].proxy, start, deleteCount, ...items);\n\t}\n\n\tlet isActiveByInheritance = !this.dataNode[NID].hasOwnProperty('status');\n\tthis.dataNode[NID].status = NODE_STATUSES.splicing;\n\tlet oldValue = this.proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.splice.call(this.proxyNode[ND].proxy, start, deleteCount, ...items); // creates many side-effect events\n\tlet args = { start, deleteCount, items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete this.dataNode[NID].status;\n\t} else {\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\n\tinitFunctionEmitEvent(this.dataNode, EVENTS.splice, args, oldValue, this.proxyNode[ND].target);\n\n\treturn deleted;\n}\n\nexport const shift: ShiftFunction = function shift(this) {\n\tif(this.dataNode[NID].status !== NODE_STATUSES.active) {\n\t\t// if not active then run regular `shift`\n\t\t// which will reach the `set` of the ProxyHandler and will be blocked or events stopped, etc.\n\t\treturn Array.prototype.shift.call(this.proxyNode[ND].proxy);\n\t}\n\n\tlet isActiveByInheritance = !this.dataNode[NID].hasOwnProperty('status');\n\tthis.dataNode[NID].status = NODE_STATUSES.splicing;\n\tlet oldValue = this.proxyNode[ND].target.slice(0);\n\tlet deleted = Array.prototype.shift.call(this.proxyNode[ND].proxy); // creates many side-effect events\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete this.dataNode[NID].status;\n\t} else {\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\n\tinitFunctionEmitEvent(this.dataNode, EVENTS.shift, {}, oldValue, this.proxyNode[ND].target);\n\n\treturn deleted;\n}\n\nexport const unshift: UnshiftFunction = function unshift(this, ...items) {\n\tif(this.dataNode[NID].status !== NODE_STATUSES.active) {\n\t\t// if not active then run regular `unshift`\n\t\t// which will reach the `set` of the ProxyHandler and will be blocked or events stopped, etc.\n\t\treturn Array.prototype.shift.call(this.proxyNode[ND].proxy) as number;\n\t}\n\n\tlet isActiveByInheritance = !this.dataNode[NID].hasOwnProperty('status');\n\tthis.dataNode[NID].status = NODE_STATUSES.splicing;\n\tlet oldValue = this.proxyNode[ND].target.slice(0);\n\tlet newLength: number = Array.prototype.unshift.call(this.proxyNode[ND].proxy, ...items); // creates many side-effect events\n\tlet args = { items };\n\t\n\tif(isActiveByInheritance) {\n\t\tdelete this.dataNode[NID].status;\n\t} else {\n\t\tthis.dataNode[NID].status = NODE_STATUSES.active;\n\t}\n\n\tinitFunctionEmitEvent(this.dataNode, EVENTS.unshift, args, oldValue, this.proxyNode[ND].target);\n\n\treturn newLength;\n}\n","/**\n * 2022 Noam Lin <noamlin@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n */\n\"use strict\"\n\nimport { proxyTypes, NODE_STATUSES, PROXY_STATUSES, ND, NID } from './globals';\nimport type { TargetVariable, SomeObject } from './types/globals';\nimport type { ProxserveInstance, DataNode, ProxyNode, ProxserveInstanceMetadata } from './types/proxserve-class';\nimport { unproxify, createNodes, stackTraceLog } from './supporting-functions';\nimport * as pseudoMethods from './pseudo-methods';\nimport * as proxyMethods from './proxy-methods';\nimport { realtypeof, splitPath, evalPath } from './general-functions';\nimport { initEmitEvent } from './event-emitter';\n\nconst doNotProxifyPrefix = '_$';\nconst pseudoMethodsAlternativeNamingPrefix = '$';\n\n/**\n * save an array of all reserved function names\n * and also add synonyms to these functions\n */\nlet pseudoMethodsNames = Object.keys(pseudoMethods);\nfor(let i = pseudoMethodsNames.length - 1; i >= 0; i--) {\n\tlet name = pseudoMethodsNames[i];\n\tlet synonym = pseudoMethodsAlternativeNamingPrefix + name;\n\tpseudoMethods[synonym] = pseudoMethods[name];\n\tpseudoMethodsNames.push(synonym);\n}\n\ninterface MakeOptions {\n\tstrict?: ProxserveInstanceMetadata['strict'];\n\tmethodsEmitRaw?: ProxserveInstanceMetadata['methodsEmitRaw'];\n\t/** internal root name of the instance */\n\tname?: string;\n\tdebug?: {\n\t\tdestroyDelay?: ProxserveInstanceMetadata['destroyDelay'];\n\t\ttrace?: ProxserveInstanceMetadata['trace'];\n\t};\n}\n\nexport class Proxserve {\n\t/**\n\t * make a new proxserve instance\n\t */\n\tstatic make<T>(target: TargetVariable, options = {} as MakeOptions): ProxserveInstance & T {\n\t\tconst {\n\t\t\tstrict = true,\n\t\t\tmethodsEmitRaw = false,\n\t\t\tname = '',\n\t\t\tdebug,\n\t\t} = options;\n\n\t\tconst destroyDelay = debug?.destroyDelay ?? 1000;\n\t\tconst trace = debug?.trace ?? 'none';\n\n\t\tlet dataTreePrototype: DataNode = {\n\t\t\t[NID]: {\n\t\t\t\tstatus: NODE_STATUSES.active,\n\t\t\t\tname,\n\t\t\t},\n\t\t\t[ND]: { isTreePrototype: true } as DataNode[typeof ND],\n\t\t};\n\t\tlet proxyTreePrototype: ProxyNode = {\n\t\t\t[NID]: { status: PROXY_STATUSES.alive },\n\t\t\t[ND]: { isTreePrototype: true } as ProxyNode[typeof ND],\n\t\t};\n\n\t\tconst newNodes = createNodes(dataTreePrototype, '', proxyTreePrototype, target);\n\n\t\tconst metadata = {\n\t\t\tstrict,\n\t\t\tmethodsEmitRaw,\n\t\t\tdestroyDelay,\n\t\t\ttrace,\n\t\t\tdataTree: newNodes.dataNode,\n\t\t\tproxyTree: newNodes.proxyNode,\n\t\t} as ProxserveInstanceMetadata;\n\n\t\treturn Proxserve.createProxy<T>(metadata, metadata.dataTree);\n\t}\n\n\t/**\n\t * create a new proxy and a new node for a property of the parent's target-object\n\t */\n\tstatic createProxy<T>(\n\t\tmetadata: ProxserveInstanceMetadata,\n\t\tparentDataNode: DataNode,\n\t\ttargetProperty?: string,\n\t): ProxserveInstance & T {\n\t\tconst parentProxyNode = parentDataNode[ND].proxyNode!;\n\t\tlet dataNode: DataNode;\n\t\tlet proxyNode: ProxyNode;\n\n\t\tif(targetProperty === undefined) { //refering to own node and not a child property (meaning root object)\n\t\t\tdataNode = parentDataNode;\n\t\t\tproxyNode = parentProxyNode;\n\t\t}\n\t\telse {\n\t\t\t//create new or reset an existing data-node and then creates a new proxy-node\n\t\t\tconst newNodes = createNodes(\n\t\t\t\tparentDataNode,\n\t\t\t\ttargetProperty,\n\t\t\t\tparentProxyNode,\n\t\t\t\tparentProxyNode[ND].target[targetProperty],\n\t\t\t);\n\t\t\tdataNode = newNodes.dataNode;\n\t\t\tproxyNode = newNodes.proxyNode!;\n\t\t}\n\n\t\tlet target = proxyNode[ND].target;\n\n\t\tlet typeoftarget = realtypeof(target);\n\n\t\tif(proxyTypes[typeoftarget]) {\n\t\t\tlet revocable = Proxy.revocable<TargetVariable>(target, {\n\t\t\t\tget: (target: TargetVariable/*same as parent scope 'target'*/, property: string|symbol, proxy) => {\n\t\t\t\t\tif(metadata.methodsEmitRaw === false && Object.prototype.hasOwnProperty.call(proxyMethods, property) && property in Object.getPrototypeOf(target)) {\n\t\t\t\t\t\t// use a proxy method instead of the built-in method that is on the prototype chain\n\t\t\t\t\t\treturn proxyMethods[property].bind({ metadata, dataNode, proxyNode });\n\t\t\t\t\t}\n\t\t\t\t\telse if(pseudoMethodsNames.includes(property as string) && typeof target[property] === 'undefined') {\n\t\t\t\t\t\t// can access a pseudo function (or its synonym) if their keywords isn't used\n\t\t\t\t\t\treturn pseudoMethods[property].bind({ metadata, dataNode, proxyNode });\n\t\t\t\t\t}\n\t\t\t\t\telse if(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\treturn target[property]; // non-enumerable or non-path'able aren't proxied\n\t\t\t\t\t}\n\t\t\t\t\telse if(\n\t\t\t\t\t\tproxyNode[property] // there's a child node\n\t\t\t\t\t\t&& proxyNode[property][ND].proxy // it holds a proxy\n\t\t\t\t\t\t&& proxyNode[property][NID].status === PROXY_STATUSES.alive\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn proxyNode[property][ND].proxy;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn target[property];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\n\t\t\t\tset: (target/*same as parent scope 'target'*/, property, value, proxy) => { //'receiver' is proxy\n\t\t\t\t\t/**\n\t\t\t\t\t * property can be a regular object because of a few possible reasons:\n\t\t\t\t\t * 1. proxy is deleted from tree but user keeps accessing it then it means he saved a reference.\n\t\t\t\t\t * 2. it is a non-enumerable property which means it was intentionally hidden.\n\t\t\t\t\t * 3. property is a symbol and symbols can't be proxied because we can't create a normal path for them.\n\t\t\t\t\t *    these properties are not proxied and should not emit change-event.\n\t\t\t\t\t *    except for: length\n\t\t\t\t\t * 4. property is manually set as raw object with the special prefix.\n\t\t\t\t\t * TODO - make a list of all possible properties exceptions (maybe function 'name'?)\n\t\t\t\t\t */\n\t\t\t\t\tif(dataNode[NID].status === NODE_STATUSES.blocked) { //blocked from changing values\n\t\t\t\t\t\tconsole.error('object is blocked. can\\'t change value of property:', property);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(\n\t\t\t\t\t\ttypeof property === 'symbol'\n\t\t\t\t\t\t|| property.indexOf(doNotProxifyPrefix) === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse if(property !== 'length' && !target.propertyIsEnumerable(property)) {\n\t\t\t\t\t\t//if setting a whole new property then it is non-enumerable (yet) so a further test is needed\n\t\t\t\t\t\tlet descriptor = Object.getOwnPropertyDescriptor(target, property);\n\t\t\t\t\t\tif(typeof descriptor === 'object' && descriptor.enumerable === false) { //property was previously set\n\t\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; // should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t// about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = PROXY_STATUSES.deleted;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; // detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t// postpone this cpu intense function for later, probably when proxserve is not in use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue = unproxify(value);\n\t\t\t\t\ttarget[property] = value; //assign new value\n\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\tlet typeofvalue = realtypeof(value);\n\t\t\t\t\tif(proxyTypes[typeofvalue]) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, property); // if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy, metadata.trace);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * TODO - this function is incomplete and doesn't handle all of 'descriptor' scenarios\n\t\t\t\t */\n\t\t\t\tdefineProperty: (target/*same as parent scope 'target'*/, property, descriptor) => {\n\t\t\t\t\tif(typeof property === 'symbol') {\n\t\t\t\t\t\tObject.defineProperty(target, property, descriptor);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\tproxyNode[property][NID].status = PROXY_STATUSES.deleted;\n\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdescriptor.value = unproxify(descriptor.value);\n\t\t\t\t\tObject.defineProperty(target, property, descriptor); //defining the new value\n\t\t\t\t\tlet value = descriptor.value;\n\t\t\t\t\tlet isValueProxy = false;\n\t\t\t\t\t//excluding non-enumerable properties from being proxied\n\t\t\t\t\tlet typeofvalue = realtypeof(descriptor.value);\n\t\t\t\t\tif(proxyTypes[typeofvalue] && descriptor.enumerable === true) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, property); //if trying to add a new value which is an object then make it a proxy\n\t\t\t\t\t\tisValueProxy = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, value, isValueProxy);\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\tdeleteProperty: (target/*same as parent scope 'target'*/, property) => {\n\t\t\t\t\tif(!target.propertyIsEnumerable(property) || typeof property === 'symbol') {\n\t\t\t\t\t\t//non-proxied properties simply get deleted and nothing more\n\t\t\t\t\t\tdelete target[property];\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(dataNode[NID].status === NODE_STATUSES.blocked) { //blocked from changing values\n\t\t\t\t\t\tconsole.error(`can't delete property '${property}'. object is blocked.`);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(property in target) {\n\t\t\t\t\t\tlet oldValue = target[property]; //should not be proxy\n\t\t\t\t\t\tlet isOldValueProxy = false;\n\t\t\t\t\t\tif(proxyNode[property] !== undefined && proxyNode[property][ND].proxy !== undefined) {\n\t\t\t\t\t\t\t//about to overwrite an existing property which is a proxy (about to detach a proxy)\n\t\t\t\t\t\t\tproxyNode[property][NID].status = PROXY_STATUSES.deleted;\n\t\t\t\t\t\t\tdelete dataNode[property][ND].proxyNode; //detach reference from data-node to proxy-node\n\t\t\t\t\t\t\tisOldValueProxy = true;\n\t\t\t\t\t\t\tif(metadata.strict) {\n\t\t\t\t\t\t\t\t//postpone this cpu intense function for later, probably when proxserve is not is use\n\t\t\t\t\t\t\t\tsetTimeout(Proxserve.destroy, metadata.destroyDelay, proxyNode[property][ND].proxy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete target[property]; // actual delete\n\n\t\t\t\t\t\tinitEmitEvent(dataNode, property, oldValue, isOldValueProxy, undefined, false);\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn true; //do nothing because there's nothing to delete\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as ProxyHandler<TargetVariable>) as { proxy: ProxserveInstance & T, revoke: () => void };\n\n\t\t\tproxyNode[ND].proxy = revocable.proxy;\n\t\t\tproxyNode[ND].revoke = revocable.revoke;\n\n\t\t\tif(proxyTypes[typeoftarget]) {\n\t\t\t\tlet keys = Object.keys(target); //handles both Objects and Arrays\n\t\t\t\tfor(let key of keys) {\n\t\t\t\t\tif (key.indexOf(doNotProxifyPrefix) === 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet typeofproperty = realtypeof(target[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\tProxserve.createProxy(metadata, dataNode, key); //recursively make child objects also proxies\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.warn(`Type of \"${typeoftarget}\" is not implemented`);\n\t\t\t}\n\n\t\t\treturn revocable.proxy;\n\t\t}\n\t\telse {\n\t\t\tconst types = Object.keys(proxyTypes);\n\t\t\tthrow new Error(`Must observe an ${types.join('/')}`);\n\t\t}\n\t}\n\n\t/**\n\t * Recursively revoke proxies, allowing them to be garbage collected.\n\t * this functions delays 1000 milliseconds to let time for all events to finish\n\t */\n\tstatic destroy(proxy: ProxserveInstance) {\n\t\tlet proxyNode: ProxyNode;\n\t\ttry {\n\t\t\tconst nodes = proxy.$getProxserveNodes();\n\t\t\tproxyNode = nodes.proxyNode;\n\t\t} catch(error) {\n\t\t\treturn; // proxy variable isn't a proxy\n\t\t}\n\n\t\tif(proxyNode[NID].status === PROXY_STATUSES.alive) {\n\t\t\tproxyNode[NID].status = PROXY_STATUSES.deleted;\n\t\t}\n\n\t\tlet typeofproxy = realtypeof(proxy);\n\n\t\tif(proxyTypes[typeofproxy]) {\n\t\t\tlet keys = Object.keys(proxy); // handles both Objects and Arrays\n\t\t\tfor(let key of keys) {\n\t\t\t\tif (key.indexOf(doNotProxifyPrefix) === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlet typeofproperty = realtypeof(proxy[key]);\n\t\t\t\t\tif(proxyTypes[typeofproperty]) {\n\t\t\t\t\t\t// going to proxy[key], which is deleted, will return the original target so we will bypass it\n\t\t\t\t\t\tProxserve.destroy(proxyNode[key][ND].proxy!);\n\t\t\t\t\t}\n\t\t\t\t} catch(error) {\n\t\t\t\t\tconsole.error(error); // don't throw and kill the whole process just if this iteration fails\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproxyNode[ND].revoke?.();\n\t\t\t//proxyNode[ND].proxy = undefined;\n\t\t\tproxyNode[NID].status = PROXY_STATUSES.revoked;\n\t\t}\n\t\telse {\n\t\t\tconsole.warn(`Type of \"${typeofproxy}\" is not implemented`);\n\t\t}\n\t}\n\n\t/**\n\t * splits a path to an array of properties\n\t */\n\tstatic splitPath(path: string): Array<string|number> {\n\t\treturn splitPath(path);\n\t}\n\n\t/**\n\t * evaluate a long path and return the designated object and its referred property\n\t */\n\tstatic evalPath(obj: SomeObject, path: string): {\n\t\tobject: SomeObject,\n\t\tproperty: string|number,\n\t\tvalue: any,\n\t} {\n\t\treturn evalPath(obj, path);\n\t}\n}"],"names":["$66763b9de58a4cbb$export$f7e0aa381a5261fc","Symbol","for","$66763b9de58a4cbb$export$d1c20e4ad7d32581","$66763b9de58a4cbb$export$94b8be4ec3303efd","Object","Array","$66763b9de58a4cbb$export$ee1d4171033e00ef","NODE_STATUSES","$66763b9de58a4cbb$export$3f0ec6107d502ceb","PROXY_STATUSES","$66763b9de58a4cbb$export$fa3d5b535a2458a1","EVENTS","$fda00bc7ddcd3bc7$export$99a2acdf670c1bf4","variable","rawType","prototype","toString","call","substring","length","WeakSet","$fda00bc7ddcd3bc7$export$824c337f43f2b64d","path","i","betweenBrackets","onlyDigits","resultsArr","tmp","char","push","parseInt","code","charCodeAt","$fda00bc7ddcd3bc7$export$8ffa680996c65fde","obj","object","property","value","segments","Error","$cb4cc1e2f387f5a6$export$fa6813432f753b0d","this","dataNode","status","stopped","$cb4cc1e2f387f5a6$export$837bd02682cd3db9","blocked","$cb4cc1e2f387f5a6$export$234c45b355edd85b","force","metadata","dataTree","active","$cb4cc1e2f387f5a6$export$af631764ddc44097","args","listener","id","deep","once","event","events","keys","isArray","names","join","$a72f28e28e24748b$export$953dd193a01bd6ec","listenersPool","listeners","shallow","listenerObj","type","func","undefined","$cb4cc1e2f387f5a6$export$d2de3aaeafa91619","$cb4cc1e2f387f5a6$var$removeById","listenersArr","splice","$cb4cc1e2f387f5a6$export$b03e9483f936dccb","fullPath","console","warn","$cb4cc1e2f387f5a6$export$6f2e3a6079f109b1","$cb4cc1e2f387f5a6$export$35f261dd63190ac1","proxyNode","target","$cb4cc1e2f387f5a6$export$e4722608b73ef3f1","name","$cb4cc1e2f387f5a6$export$533e55abf9329f7b","$cb4cc1e2f387f5a6$export$c3c6db5039118967","$a72f28e28e24748b$export$1b787634d8e3bf02","typeofobj","$a72f28e28e24748b$export$a58c3ed528c9c399","typeofvalue","$getOriginalTarget","error","key","parentDataNode","parentProxyNode","propertyPath","create","parentNode","isTreePrototype","assign","$a72f28e28e24748b$var$noStackFlag","$a72f28e28e24748b$export$af0f09151be4a419","logLevel","change","stack","lines","split","map","trim","toLowerCase","indexOf","shift","title","update","delete","unshift","log","$08aa8f4cfdbb0713$var$getProxyValue","alive","proxy","$08aa8f4cfdbb0713$export$febbc75e71f4ca1b","oldValue","wasOldValueProxy","isValueProxy","trace","deferredEvents","changeType","splicing","shouldCapture","$08aa8f4cfdbb0713$var$bubbleEmit","$08aa8f4cfdbb0713$var$captureEmit","thisValue","$08aa8f4cfdbb0713$var$iterateAndEmit","nextChange","subValue","subOldValue","subChange","childNode","includes","$08aa8f4cfdbb0713$export$29f2d3a310653bb4","funcName","funcArgs","$f5798ab020ffb663$export$869882364835d202","start","deleteCount","items","isActiveByInheritance","hasOwnProperty","slice","deleted","$f5798ab020ffb663$export$fba63a578e423eb","$f5798ab020ffb663$export$37cdb546b806ae87","newLength","$f3a59425b0ffb76f$var$pseudoMethodsNames","$cb4cc1e2f387f5a6$exports","synonym","$f3a59425b0ffb76f$export$d402cf8388053971","static","options","strict","methodsEmitRaw","debug","destroyDelay","newNodes","proxyTree","createProxy","targetProperty","typeoftarget","revocable","Proxy","get","$f5798ab020ffb663$exports","getPrototypeOf","bind","propertyIsEnumerable","set","descriptor","getOwnPropertyDescriptor","enumerable","isOldValueProxy","setTimeout","destroy","defineProperty","deleteProperty","revoke","typeofproperty","types","$getProxserveNodes","typeofproxy","error1","revoked"],"version":3,"file":"index.min.js.map"}